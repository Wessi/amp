Index: .project
===================================================================
--- .project	(revision 24332)
+++ .project	(working copy)
@@ -73,4 +73,15 @@
 		<nature>qwickie.qwickieNature</nature>
 		<nature>org.eclipse.wst.common.project.facet.core.nature</nature>
 	</natures>
+	<filteredResources>
+		<filter>
+			<id>1406705043246</id>
+			<name></name>
+			<type>22</type>
+			<matcher>
+				<id>org.eclipse.ui.ide.multiFilter</id>
+				<arguments>1.0-name-matches-false-false-*.class</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
 </projectDescription>
Index: WEB-INF/src/org/dgfoundation/amp/mondrian/MondrianETL.java
===================================================================
--- WEB-INF/src/org/dgfoundation/amp/mondrian/MondrianETL.java	(revision 24332)
+++ WEB-INF/src/org/dgfoundation/amp/mondrian/MondrianETL.java	(working copy)
@@ -21,12 +21,22 @@
 import org.apache.log4j.Logger;
 import org.dgfoundation.amp.Util;
 import org.dgfoundation.amp.ar.AmpARFilter;
+import org.dgfoundation.amp.ar.viewfetcher.I18nViewColumnDescription;
+import org.dgfoundation.amp.ar.viewfetcher.I18nViewDescription;
 import org.dgfoundation.amp.ar.viewfetcher.SQLUtils;
 import org.dgfoundation.amp.newreports.ReportEntityType;
 import org.digijava.kernel.persistence.PersistenceManager;
+import org.digijava.module.aim.dbentity.AmpActivityVersion;
+import org.digijava.module.aim.dbentity.AmpCategoryValueLocations;
 import org.digijava.module.aim.dbentity.AmpCurrency;
+import org.digijava.module.aim.dbentity.AmpOrgGroup;
+import org.digijava.module.aim.dbentity.AmpOrgType;
+import org.digijava.module.aim.dbentity.AmpOrganisation;
+import org.digijava.module.aim.dbentity.AmpSector;
+import org.digijava.module.aim.dbentity.AmpSectorScheme;
 import org.digijava.module.aim.helper.Constants;
 import org.digijava.module.aim.util.CurrencyUtil;
+import org.digijava.module.aim.util.time.StopWatch;
 
 
 /**
@@ -37,11 +47,7 @@
 public class MondrianETL {
 	
 	public final static String FACT_TABLE_NAME = "mondrian_fact_table";
-	public final static String MONDRIAN_LOCATIONS_DIMENSION_TABLE = "mondrian_locations";
-	public final static String MONDRIAN_SECTORS_DIMENSION_TABLE = "mondrian_sectors";
-	public final static String MONDRIAN_PROGRAMS_DIMENSION_TABLE = "mondrian_programs";
-	public final static String MONDRIAN_ORGANIZATIONS_DIMENSION_TABLE = "mondrian_organizations";
-	public final static String MONDRIAN_ACTIVITY_TEXTS = "mondrian_activity_texts";
+	
 	public final static String MONDRIAN_EXCHANGE_RATES_TABLE = "mondrian_exchange_rates";
 	public final static String MONDRIAN_DATE_TABLE = "mondrian_dates";
 	
@@ -159,15 +165,33 @@
 	 */
 	public void execute() throws SQLException{
 		synchronized(ETL_LOCK) {
+			String mondrianEtl = "Mondrian-etl";
 			conn.setAutoCommit(false);
 			conn.setAutoCommit(true);
 			conn.setAutoCommit(false); // make it faster
+			
+			StopWatch.reset(mondrianEtl);
+			StopWatch.next(mondrianEtl, true, "start");
 			checkFactTable();
+			
+			StopWatch.next(mondrianEtl, true, "checkFactTable");
 			deleteStaleFactTableEntries();
+			
+			StopWatch.next(mondrianEtl, true, "deleteStaleFactTableEntries");
 			generateActivitiesEntries();
+			
+			StopWatch.next(mondrianEtl, true, "generateActivitiesEntries");
 			generateExchangeRatesTable();
+			
+			StopWatch.next(mondrianEtl, true, "generateExchangeRatesTable");
 			generateStarTables();
-			checkMondrianSanity();			
+			
+			StopWatch.next(mondrianEtl, true, "generateStarTables");
+			checkMondrianSanity();
+			
+			StopWatch.next(mondrianEtl, true, "checkMondrianSanity");
+			StopWatch.reset(mondrianEtl);
+			
 			logger.error("done generating ETL");
 			conn.setAutoCommit(true);
 			conn.setAutoCommit(false);
@@ -232,11 +256,9 @@
 	 */
 	protected void generateStarTables() throws SQLException {
 		logger.warn("generating STAR tables...");
-		generateStarTable(MONDRIAN_LOCATIONS_DIMENSION_TABLE, "id", "parent_location", "country_id", "region_id", "zone_id", "district_id");
-		generateStarTable(MONDRIAN_SECTORS_DIMENSION_TABLE, "amp_sector_id", "parent_sector_id", "level0_sector_id", "level1_sector_id", "level2_sector_id");
-		generateStarTable(MONDRIAN_PROGRAMS_DIMENSION_TABLE, "amp_theme_id", "parent_theme_id", "program_setting_id", "program_setting_name", "id2", "id3", "id4", "id5", "id6", "id7", "id8");
-		generateStarTable(MONDRIAN_ORGANIZATIONS_DIMENSION_TABLE, "amp_org_id", "amp_org_grp_id", "amp_org_type_id");
-		generateStarTable(MONDRIAN_ACTIVITY_TEXTS, "amp_activity_id");
+		for (MondrianTableDescription mondrianTable:MondrianTablesRepository.MONDRIAN_TRANSLATED_TABLES)
+			generateStarTable(mondrianTable);
+		
 		generateStarTableWithQuery(MONDRIAN_DATE_TABLE,
 			"SELECT DISTINCT(mft.date_code) AS day, mft.transaction_date AS full_date, date_part('year'::text, mft.transaction_date)::integer AS year, date_part('month'::text, mft.transaction_date)::integer AS month, to_char(mft.transaction_date, 'TMMonth'::text) AS month_name, date_part('quarter'::text, mft.transaction_date)::integer AS quarter, ('Q'::text || date_part('quarter'::text, mft.transaction_date)) AS quarter_name " + 
 			"FROM mondrian_fact_table mft " + 
@@ -248,9 +270,17 @@
 		logger.warn("...generating STAR tables done");
 	}
 
-	protected void generateStarTable(String tableName, String... columnsToIndex) throws SQLException {
-		generateStarTableWithQuery(tableName, "SELECT * FROM v_" + tableName, columnsToIndex);
+	/**
+	 * processes a MondrianTableDescription using {@link #generateStarTableWithQuery(String, String, String...)} (which creates the table and the indices and the collations
+	 * @param mondrianTable
+	 * @throws SQLException
+	 */
+	protected void generateStarTable(MondrianTableDescription mondrianTable) throws SQLException {
+		generateStarTableWithQuery(mondrianTable.tableName, "SELECT * FROM v_" + mondrianTable.tableName, mondrianTable.indexedColumns);
+		
+		// now, the base (non-multilingual) dimension table is ready, now we need to make multilingual clones of it
 	}
+	
 	/**
 	 * makes a snapshot of the view v_<strong>tableName</strong> in the table <strong>tableName</strong> and then creates indices on the relevant columns
 	 * @param tableName
@@ -260,7 +290,16 @@
 	protected void generateStarTableWithQuery(String tableName, String tableCreationQuery, String... columnsToIndex) throws SQLException {
 		SQLUtils.executeQuery(conn, "DROP TABLE IF EXISTS " + tableName);
 		SQLUtils.executeQuery(conn, "CREATE TABLE " + tableName + " AS " + tableCreationQuery);
-		
+
+		postprocessDimensionTable(tableName, columnsToIndex);
+	}
+	
+	/**
+	 * makes any needed postprocessing on a Mondrian Dimension table (indices, collations, etc)
+	 * @param tableName
+	 * @param columnsToIndex
+	 */
+	protected void postprocessDimensionTable(String tableName, String... columnsToIndex) {
 		// change text column types' collation to C -> 7x faster GROUP BY / ORDER BY for stupid Mondrian
 		Map<String, String> tableColumns = SQLUtils.getTableColumnsWithTypes(tableName, true);
 		Set<String> textColumnTypes = new HashSet<String>() {{add("text"); add("character varying"); add("varchar");}};
@@ -339,6 +378,11 @@
 			logger.warn("\t...executing query #" + (i + 1) + " done");
 		}
 		logger.warn("...running the fact-table-generating cartesian done");
+		long factTableSize = SQLUtils.fetchLongs(conn, "select count(*) from mondrian_fact_table").get(0);
+		long nrTransactions = SQLUtils.fetchLongs(conn, "select count(*) from amp_activity aa join amp_funding f on aa.amp_activity_id = f.amp_activity_id join amp_funding_detail fd on f.amp_funding_id = fd.amp_funding_id").get(0);
+		double explosionFactor = nrTransactions > 0 ? ((1.0 * factTableSize) / nrTransactions) : 1.0;
+		logger.warn(
+				String.format("fact table generated %d fact table entries using %d initial transactions (multiplication factor: %.2f)", factTableSize, nrTransactions, explosionFactor));
 	}
 	
 	protected void runEtlOnTable(String query, String tableName) throws SQLException {
Index: deployConfigs/selected.properties
===================================================================
--- deployConfigs/selected.properties	(revision 24332)
+++ deployConfigs/selected.properties	(working copy)
@@ -1,4 +1,4 @@
 #Description of the selected config
-#Thu, 10 Jul 2014 13:31:47 +0300
+#Wed, 30 Jul 2014 10:11:18 +0300
 
 serverName=local
Index: repository/bootstrap/hacks.js
===================================================================
--- repository/bootstrap/hacks.js	(revision 24332)
+++ repository/bootstrap/hacks.js	(working copy)
@@ -7,7 +7,7 @@
  *  	DO NOT CHANGE THIS FILE IF YOU DO NOT UNDERSTAND WHAT YOU ARE DOING!
  *  	IT IS VERY FRAGILE SINCE WE HAVE A RESIZEABLE IFRAME WHICH USES PNOTIFY!
  *  
- *  COUNTER: number of times pledges module has been broken: 2
+ *  COUNTER: number of times pledges module has been broken: <!== 3 ==!>
  * 
  */
 	function pageY(elem) {
@@ -26,7 +26,7 @@
 	}
 	
 	function window_resized(){
-		var buffer = 20;
+		var buffer = 50;
 	    var height = Math.max(get_number($(window).height()), 
 	    		get_number(window.innerHeight)); //document.documentElement.clientHeight; // was: clientHeight
 	    height -= pageY(document.getElementById('bootstrap_iframe'))+ buffer ;
Index: xmlpatches/general/views/v_mondrian_activity_texts.xml
===================================================================
--- xmlpatches/general/views/v_mondrian_activity_texts.xml	(revision 24332)
+++ xmlpatches/general/views/v_mondrian_activity_texts.xml	(working copy)
@@ -21,7 +21,11 @@
 			<lang delimiter=";" type="postgres">
 				DROP VIEW IF EXISTS v_mondrian_activity_texts;
 				CREATE OR REPLACE VIEW v_mondrian_activity_texts AS
-					SELECT aav.amp_activity_id, aav.name, aav.approval_status, aav.amp_id FROM amp_activity_version aav;
+					SELECT aav.amp_activity_id, aav.name, aav.approval_status, aav.amp_id, 
+						COALESCE(status.name, 'Undefined') AS amp_status_name, COALESCE(status.amp_status_id, 999999999) AS amp_status_id
+						FROM 
+							amp_activity_version aav
+							LEFT JOIN v_status status ON aav.amp_activity_id = status.amp_activity_id;
 			</lang>
 		</script>
 	</apply>
