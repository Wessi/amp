<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:axiis="http://www.axiis.org/2009"
				xmlns:degrafa="http://www.degrafa.com/2007"
				xmlns:charts="org.axiis.charts.*"
				xmlns:geometry="com.degrafa.geometry.*" 
				xmlns:Examples="Examples.*"
				backgroundGradientColors="[0xDDDDDD,0xF5F5F5]"
				layout="absolute"
				creationComplete="application1_creationCompleteHandler(event);" viewSourceURL="srcview/index.html" xmlns:debug="org.axiis.debug.*" >
	
	<mx:HTTPService id="service" url="http://localhost:8081/visualization/dataDispatcher.do?action=getAidTypeGraphData" result="service_resultHandler(event)" >
		<mx:request>
			<format>xml</format>
			<typeofaid>true</typeofaid>
			<donut>true</donut>
		</mx:request>
	</mx:HTTPService>
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.SliderEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ArrayUtil;
			import com.exportUtil.*;
			
			import org.axiis.core.AxiisSprite;
			import org.axiis.data.DataSet;
			private var palette:Array = new Array();
			
			private var ds:DataSet = new DataSet();
			
			public function start():void
			{
				
				//perform aggregations to create data values for our nested wedges
				//ds.aggregateData(service.lastResult, "sector.amount", ["amount"]);
				//ds.aggregateData(service.lastResult, "sector", ["aggregates.amount_amount_sum"]);
				
				//Set our max scale value.
				//dataProvider = service.lastResult.sector;
				
				//perform aggregations to create data values for our nested wedges
				if(isNaN(sliderYear.value))
				{
					try {
						startYear = service.lastResult.aidtype.startYear;
						endYear = service.lastResult.aidtype.endYear;
						sliderYear.value = endYear;
					} catch (errObject:Error) {
						startYear = service.lastResult.aidtype[0].startYear;
						endYear = service.lastResult.aidtype[0].endYear;
						sliderYear.value = endYear;
					}
					var labelArray:Array = new Array(); 
					for (var index:Number=startYear; index <= endYear; index++){
						labelArray[labelArray.length] = index;
					}
					sliderYear.labels = labelArray;
				}
				
				//Set our max scale value.
				dataProvider = service.lastResult.aidtype;
				if("length" in service.lastResult.aidtype) // If it's not empty
				{
					dc.visible = true;
					messagePanel.visible = false;
					sizePanel(0, 0);
				}
				else
				{
					dc.visible = false;
					messagePanel.visible = true;
					sizePanel(300, 200);
				}
				dc.setStyle("borderStyle","solid");
				
				var paletteStr:String = null;
				paletteStr = LoaderInfo(this.root.loaderInfo).parameters.palette;
				var palArray = paletteStr.split(",");
				//palette = new Array();
				for (var i:Number = 0; i < palArray.length; i++){
					var tmp:Number = palArray[i];
					palette.push(tmp);
				}
				dc.invalidateDisplayList();
				var delayer:Delay = new Delay(captureSnapshot,2000,1); //capture snapshot
				
			}
			
			private function captureSnapshot():void
			{
				var curUrl:String =  String( ExternalInterface.call(" function(){ return document.location.href.toString();}"));
				var strUrl:String ="/visualization/dataDispatcher.do?action=setChartImageFromSnapshot";
				var strDomain:String = "";
				var strProtocol:String = "";
				if(curUrl.indexOf("file://") > -1){
					strProtocol = "http:";
					strDomain = "localhost:8081";
				}
				else
				{
					strProtocol = curUrl.split('/')[0];
					strDomain = curUrl.split('/')[2];
				}
				FlexExporter.ExportToImage(mxc1,"png", strProtocol + "//" + strDomain + strUrl, "AidType");
			}
			//Used to rotate wedge labels 180 degrees for readability
			private function transposeLabel1(wedge:Object):Boolean
			{
				if ((wedge.startAngle + wedge.arc / 2) > 90 && (wedge.startAngle + wedge.arc / 2) < 270)
				{
					return true;
				}
				else
				{
					return false;
				}
			}
			
			public function colorFunction(val:Object):Number
			{
				return Number(val) & -0x333333;
			}
			public function wrapIt(val:String):String
			{
				if (val != null){
					return val + "%";
				}
				return "";
			}
			
			public function dataTipFunction(val:Object):String
			{
				if (val != null){
					return val.data.label + "\n" + val.data.value;
				}
				return "cadena";
			}
			
			
			protected function service_resultHandler(event:ResultEvent):void
			{
				start();
			}
			protected function application1_creationCompleteHandler(event:FlexEvent):void
			{
				var curUrl:String =  String( ExternalInterface.call(" function(){ return document.location.href.toString();}"));
				var strUrl:String ="/visualization/dataDispatcher.do?action=getAidTypeGraphData";
				var strDomain:String = "";
				var strProtocol:String = "";
				if(curUrl.indexOf("file://") > -1){
					strProtocol = "http:";
					strDomain = "localhost:8081";
				}
				else
				{
					strProtocol = curUrl.split('/')[0];
					strDomain = curUrl.split('/')[2];
				}
				service.url = strProtocol + "//" + strDomain + strUrl;
				service.send();
				try {
					ExternalInterface.addCallback("refreshGraph", refreshGraph);			
				}
				catch(errObject:Error){
					//Fail silently when running standalone
				}
			}
			
			public function refreshGraph():void
			{
				service.send();
				start();
			}
			
			
			protected function sliderYear_changeHandler(event:SliderEvent):void
			{
				// TODO Auto-generated method stub
				allYears.selected = false;
				var params:Object = {};
				params["year"] = sliderYear.value;
				params["format"] = "xml";
				params["typeofaid"] = "true";
				params["donut"] = "true";
				service.send(params);
				var delayer:Delay = new Delay(captureSnapshot,2000,1);
			}
			
			protected function updateAllYears():void
			{
				if(allYears.selected){
					sliderYear.visible = false;
					var params:Object = {};
					params["format"] = "xml";
					params["typeofaid"] = "true";
					params["donut"] = "true";
					service.send(params);
					var delayer:Delay = new Delay(captureSnapshot,2000,1); //capture snapshot
				}
				else
				{
					sliderYear.visible = true;
					sliderYear_changeHandler(new SliderEvent(mx.events.SliderEvent.CHANGE));
				}
			}
			
			private function sizePanel(w:uint, h:uint):void {
				messagePanel.width = w;
				messagePanel.height = h;
			}
		]]>
	</mx:Script>
	<mx:Style source="styles/Axiis_Examples.css"/>
	
	<!-- Data Provider -->
	<mx:Object id="dataProvider"/>
	
	<!-- Preference Settings -->
	<mx:Number id="startYear"></mx:Number>
	<mx:Number id="endYear"></mx:Number>
	<mx:Number id="angleGap">.5</mx:Number>
	<mx:Number id="innerRadi1">.4</mx:Number>
	<mx:Number id="innerRadi2">.78</mx:Number>
	<mx:Number id="outerRadi1">.78</mx:Number>
	<mx:Number id="outerRadi2">1</mx:Number>
	
	<!-- Common calculations used by geometries -->
	<axiis:NumericExpression id="outerRadius" value="{(dc.width/2)*outerRadi2}"/>
	<axiis:NumericExpression id="center" value="{boundsRadius.value/2}"/>
	<axiis:NumericExpression id="boundsRadius" value="{Math.min(this.height,this.width)}"/>
	
	<mx:Resize id="resize" />
	
	<mx:Canvas id="mxc1" 
			   backgroundColor="white"
			   horizontalCenter="0"
			   verticalCenter="0"
			   width="634" 
			   height="350">
		
		<!-- Data Canvas that holds our geometries -->
		<axiis:DataCanvas id="dc"
						  width="{634}"
						  height="{350}"
						  horizontalCenter="0"
						  verticalCenter="0"
						  showDataTips="false"
						  >
			<axiis:layouts>
				<!-- innerWedgeGroup:  This renders the inner ring of wedges -->
				
				<axiis:WedgeStackGroup id="innerWedgeGroup"
									   x="50"
									   y="15"
									   dataProvider="{dataProvider}"
									   startAngle="0"
									   outerRadiusRatio=".85"
									   innerRadiusRatio=".4"
									   width="{300}"
									   height="{300}"
									   labelField="percentage"
									   dataField="percentage"
									   fill="{innerWedgeFill}"
									   fontFamily="Myriad Pro"
									   fontSize="10"
									   fontColor="0xFFFFFF"
									   labelFunction="wrapIt"
									   dataTipLabelFunction="dataTipFunction"
									   >
					<!--
					targets="{[innerWedgeFillStop1,outerWedgeFill, outerWedgeGroup ,outerWedgeGroup.label]}"	
					properties="{['color','color','outerRadiusRatio','fontWeight']}"
					values="{[colorFunction,colorFunction,1.1,'bold']}"/>
					
					-->	
					
					<axiis:states>
						<axiis:State enterStateEvent="mouseOver"
									 exitStateEvent="mouseOut"
									 propagateToAncestorsSiblings="false"
									 propagateToAncestors="false"
									 propagateToDescendents="true"
									 targets="{[innerWedgeFillStop1, innerWedgeGroup]}"	
									 properties="{['color', 'outerRadiusRatio']}"
									 values="{[colorFunction, 1]}"/>
					</axiis:states>
					
				</axiis:WedgeStackGroup>
				<axiis:VBoxLayout id="legendLayout" 
								  x="{innerWedgeGroup.width+70}"
								  y="50"
								  height="200"
								  width="400"	
								  dataProvider="{dataProvider}"
								  dataField="value" 
								  showDataTips="false"
								  > 
					<axiis:drawingGeometries> 
						<degrafa:RegularRectangle 
							id="legendSquare" width="20" height="10"
							fill="{legendFill}"
							y="{legendLayout.currentReference.y+4}" 
							x="{legendLayout.currentReference.x}"/> 
						<degrafa:RasterText 
							id="legendText" 
							y="{legendLayout.currentReference.y}" 
							x="{legendLayout.currentReference.x+22}" 
							text="{legendLayout.currentDatum['label']}" 
							fontFamily="Myriad Pro"
							fontSize="11"
							width="300"
							/> 
					</axiis:drawingGeometries> 
				</axiis:VBoxLayout> 
			</axiis:layouts>
			
			<!-- Palletes used to generate our colors -->
			<axiis:palettes>
				<axiis:LayoutPalette layout="{innerWedgeGroup}" colors="{palette}" id="wedgePalette"/> 
				<axiis:LayoutPalette layout="{legendLayout}" colors="{palette}" id="legendPalette"/> 
				<!--<axiis:LayoutAutoPalette id="wedgePalette" colorFrom="0xD20000" colorTo="0x0000BD" layout="{innerWedgeGroup}"/>
				<axiis:LayoutAutoPalette id="legendPalette" colorFrom="0xD20000" colorTo="0x0000BD" layout="{legendLayout}"/>-->
			</axiis:palettes>
			
			<!-- Fills that use the colors generated by our palettes -->
			<axiis:fills>
				<degrafa:RadialGradientFill id="legendFill" cx="{legendLayout.width/2}" cy="{legendLayout.width/2}" radius="{(legendLayout.width/2)*innerRadi2}">
					<degrafa:GradientStop color="{legendPalette.currentColor | 0x333333}" ratio=".6" />
					<degrafa:GradientStop color="{legendPalette.currentColor}" id="innerWedgeFillStop2" ratio=".92" />
					<degrafa:GradientStop color="{legendPalette.currentColor &amp; -0x352234}" ratio="1"/>
				</degrafa:RadialGradientFill>
				<degrafa:RadialGradientFill id="innerWedgeFill" cx="{innerWedgeGroup.width/2}" cy="{innerWedgeGroup.width/2}" radius="{(innerWedgeGroup.width/2)*innerRadi2}">
					<degrafa:GradientStop color="{wedgePalette.currentColor | 0x333333}" ratio=".6" />
					<degrafa:GradientStop color="{wedgePalette.currentColor}" id="innerWedgeFillStop1" ratio=".92" />
					<degrafa:GradientStop color="{wedgePalette.currentColor &amp; -0x352234}" ratio="1"/>
				</degrafa:RadialGradientFill>
				<degrafa:SolidFill color="0xFFFF00" id="rollOverFill0" alpha=".9"/>
				<degrafa:SolidFill color="0xFF00FF" id="rollOverFill1" alpha=".9"/>
			</axiis:fills>
			
			<axiis:strokes>
				<degrafa:SolidStroke color="0" alpha=".6" pixelHinting="true" id="outerWedgeStroke"/>
			</axiis:strokes>
			
		</axiis:DataCanvas>
		
		<mx:CheckBox x="10" y="10" id="allYears" label="All years" click="updateAllYears()" selected="true"></mx:CheckBox>
		<mx:VSlider minimum="{startYear}" maximum="{endYear}" snapInterval="1" id="sliderYear" change="sliderYear_changeHandler(event)" width="17" x="20" y="35" dataTipPrecision="0" showDataTip="false" tickInterval="1" visible="false"/>
	</mx:Canvas>
	<mx:Panel x="{(this.width-300)/2}" y="20" title="Empty Dataset" width="0" height="0" id="messagePanel" visible="false" resizeEffect="{resize}">
		<mx:Label id="messageEmpty" fontFamily="Myriad Pro" fontWeight="bold" fontSize="14" color="black" text="No data for the selected year"/>
	</mx:Panel>
</mx:Application>
