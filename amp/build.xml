<project name="digijava" basedir="." default="compile">


    <!-- Local system paths -->
    <property file="digijava.properties"/>
		
	<property file="compat.properties"/>
    <!-- NOTE: If "dist" target is used, a local
             "dist" directory will be utilized or created -->
    <property name="distpath.project" value="./dist"/>
	<property name="debug" value="true" />


    <!-- Project settings -->
    <property name="project.title" value="DiGiJava "/>
    <property name="project.distname" value="digijava"/>
    <property name="project.version" value="1.1"/>
    <property name="lib" location="./WEB-INF/lib" />
    <property name="webinf" location="./WEB-INF" />
    <property name="classes" location="./WEB-INF/classes" />
    <property name="src" location="./WEB-INF/src" />
    <property name="test" location="./WEB-INF/test" />
    <property name="etc" location="./etc" />
    <property name="deployConfigs" location="deployConfigs"/>
	<property name="dbConfigs" location="dbConfigs"/>
	<property name="repository" location="./repository"/>
	<property name="RefreshMondrian" location="./repository/mondrian/sql"/>
	<property name="MondrianConfig" location="./WEB-INF/queries"/>
	<property name="jackrabbit" location="./jackrabbit"/>
    <property name="ampTest" location="./WEB-INF/amp-test" />


	<!-- amp_clean specific -->
	<condition property="mysql.password" value="">
	 	<not>
	 		<isset property="mysql.password"/>                              
	 	</not>
	 </condition>

	<condition property="mysql.user" value="root">
	 	<not>
	 		<isset property="mysql.user"/>                              
	 	</not>
	 </condition>

	<property name="mysql.url" value="jdbc:mysql://localhost"/>
	<property name="clean.db" value="amp_clean"/>
	
    <!-- Path settings -->
    <property name="doc.path" value="./doc/api"/>
    <property name="doc.src" value="./src/java"/>
    <property name="gen-src" value="./gen-src"/>


    <!-- classpath for Struts 1.1 -->
    <path id="compile.classpath">
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
          <include name="**/*.zip"/>
        </fileset>
        <fileset dir="${jboss-lib}">
          <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- classpath for JAXB -->	
    <path id="xjc.classpath">
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
          <include name="**/*.zip"/>
        </fileset>
    </path>

    <!-- classpath for Struts 1.1 -->
    <path id="run.classpath">
		<pathelement location="${etc}"/>
		<pathelement location="${classes}"/>
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
          <include name="**/*.zip"/>
        </fileset>
        <fileset dir="${jboss-lib}">
        	<include name="**/*.jar"/>
         </fileset>
    </path>

	<target name="get-jvm">
	    <condition property="jvm.ok">
	          <equals arg1="${ant.java.version}" arg2="${jvm.version}"/>
	    </condition>	<property name="clean.db" value="amp_clean"/>
	</target>

	  <target name="check-jvm" depends="get-jvm" unless="jvm.ok">
	    <fail message="Wrong JVM - ${ant.java.version}. JVM version has to be ${jvm.version}. Please change your JDK accordingly and rebuild."/>
	  </target>
	
	
  <taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
    <classpath refid="xjc.classpath" />
  </taskdef>

    <!-- Check timestamp on files -->
    <target name="prepare" depends="check-jvm">
        <tstamp/>
	    <echo message="JVM OK - ${ant.java.version}"/>
        <mkdir  dir="${classes}"/>
        <mkdir  dir="${distpath.project}"/>
    </target>

  <!--compile Java source files-->
   <target name="jaxb" description="Compile all Java source files">
    <echo message="Compiling the schema..." />
    <mkdir dir="${gen-src}" />
    <xjc destdir="${gen-src}" schema="./doc/IDML2.0.xsd" package="org.digijava.module.dataExchange.jaxb">
    	<produces dir="${gen-src}" includes="org/digijava/module/dataExchange/jaxb/*.java"/>
   	</xjc>
   	<xjc destdir="${gen-src}" schema="./doc/translation.xsd" package="org.digijava.module.translation.jaxb">
   		<produces dir="${gen-src}" includes="org/digijava/module/translation/jaxb/*.java"/>
    </xjc>
    <xjc destdir="${gen-src}" schema="./doc/help.xsd" package="org.digijava.module.help.jaxbi">
    	<produces dir="${gen-src}" includes="org/digijava/module/help/jaxbi/*.java"/>
    </xjc>
   </target>
	  


    <!-- Copy any resource or configuration files -->
    <target name="resources">
        <copy todir="${classes}" includeEmptyDirs="no">
            <fileset dir="${src}">
            	<patternset>
            		<exclude name="CVS/*"/>
                	<include name="**/*.conf"/>
                	<include name="**/*.properties"/>
	                <include name="**/*.xml"/>
    	            <include name="**/*.ccf"/>
        	        <include name="**/*.xsl"/>
            	    <include name="**/*.xsd"/>
					<include name="**/*.jrxml"/>
					<include name="initSQL/*.sql"/>
    	        </patternset>
            </fileset>
        </copy>
    </target>

    <target name="testResources">
        <copy todir="${classes}" includeEmptyDirs="no">
            <fileset dir="${test}">
            <patternset>
                <include name="**/*.conf"/>
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.ccf"/>
                <include name="**/*.xsl"/>
                <include name="**/*.xsd"/>
	            </patternset>
            </fileset>
        </copy>
    	<copy todir="${classes}" includeemptydirs="no">
    		<fileset dir="${ampTest}">
    			   <patternset>
    				 <include name="**/*.conf"/>
    			     <include name="**/*.properties"/>
    			     <include name="**/*.xml"/>
    			     <include name="**/*.ccf"/>
    			     <include name="**/*.xsl"/>
    			     <include name="**/*.xsd"/>
    				</patternset>
    	 	</fileset>
    	</copy>
    </target>

    <!-- Create DB data-model in a fresh schema -->
    <target name="database" depends="compile">
      <java classname="org.digijava.kernel.util.DigiSchemaExport" fork="yes">
  	    <classpath refid="run.classpath"/>
      </java>
    </target>

    <!-- Create DB data-model in a fresh schema -->
    <target name="permissions" depends="compile">
      <java classname="org.digijava.kernel.security.util.PermissionConverter" fork="yes">
  	    <classpath refid="run.classpath"/>
      </java>
    </target>

    <!-- Create DB data-model in a fresh schema -->
    <target name="modDatabase" depends="compile">
      <java classname="org.digijava.kernel.util.DigiSchemaExport" fork="yes">
        <arg value="-m"/>
 	    <arg value="${module.name}"/>
  	    <classpath refid="run.classpath"/>
      </java>
    </target>

    <!-- Export table names in comma-separated style -->
    <target name="tableNames" depends="compile">
      <java classname="org.digijava.kernel.util.DigiSchemaExport" fork="yes">
        <arg value="-names"/>
  	    <classpath refid="run.classpath"/>
      </java>
    </target>

    <!-- Export table names in comma-separated style -->
    <target name="modTableNames" depends="compile">
      <java classname="org.digijava.kernel.util.DigiSchemaExport" fork="yes">
        <arg value="-names"/>
        <arg value="-m"/>
 	    <arg value="${module.name}"/>
  	    <classpath refid="run.classpath"/>
      </java>
    </target>

    <!-- Populate fresh data-model with initial data -->
    <target name="install" depends="database">
      <java classname="org.digijava.kernel.util.DigiSchemaPopulate" fork="yes">
         <classpath refid="run.classpath"/>
      </java>
    </target>

    <target name="autoBuild">
        <javac srcdir="${src}" destdir="${classes}" deprecation="off" debug="${debug}" fork="yes" memoryMaximumSize="512m">
            <classpath refid="compile.classpath"/>
        </javac>
    </target>

    <!-- Normal build of application -->
    <target name="compile" depends="prepare,resources,jaxb">
        <javac srcdir="${src};${gen-src}" destdir="${classes}" deprecation="off" debug="${debug}" fork="yes" memoryMaximumSize="512m" encoding="utf8">
            <classpath refid="compile.classpath"/>
        </javac>
    </target>

    <target name="compileTest" depends="compile,testResources">
        <javac  srcdir="${ampTest}" destdir="${classes}" deprecation="off" debug="${debug}">
            <classpath refid="compile.classpath"/>
        </javac>
    </target>
	
    <target name="runTest" depends="compileTest">
		<mkdir dir="test-reports"/>
    	<junit  printsummary="yes" haltonfailure="yes" showoutput="yes">
    	  <classpath refid="run.classpath"/>
    	 	<formatter type="xml"/>
    		 <test   name="org.dgfoundation.amp.test.AllTest" haltonfailure="no"  todir="test-reports"/>
    	</junit>
    </target>

	<target name="runTestByTarget" depends="compileTest">
			<mkdir dir="test-reports"/>
	    	<junit  printsummary="yes" haltonfailure="yes" showoutput="yes">
	    	  <classpath refid="run.classpath"/>
	    	 	<formatter type="xml"/>
	    		 <test   name="org.dgfoundation.amp.test.${test-class}" haltonfailure="no"  todir="test-reports"/>
	    	</junit>
	    </target>

    <!-- Remove classes directory for clean build -->
    <target name="clean"
      description="Prepare for clean build">
      <delete dir="${classes}"/>
      <delete dir="${doc.path}"/>
      <delete dir="${gen-src}"/>
    </target>
                                 

    <!-- Build Javadoc documentation -->
    <target name="javadoc"
     description="Generate JavaDoc API docs">
        <delete dir="${doc.path}"/>
        <mkdir dir="${doc.path}"/>
        <javadoc sourcepath="${src}"
            destdir="${doc.path}"
            packagenames="*"
            author="true"
            private="true"
            version="true"
            windowtitle="${project.title} API Documentation"
            doctitle="&lt;h1&gt;${project.title} Documentation (Version ${project.version})&lt;/h1&gt;">
            <classpath refid="compile.classpath"/>
        </javadoc>
    </target>


    <!-- Build entire project -->
    <target name="project" depends="clean,prepare,compile,javadoc"/>

    <!-- Clean the distribution directories to prevent dist from failing the second time around -->
    <target name="cleanDist">
        <tstamp/>
        <delete dir="${distpath.project}"/>
    </target>

    <!-- Create binary distribution -->
    <target name="dist"
        description="Create binary distribution" depends="cleanDist, compile">

      <mkdir
        dir="${distpath.project}"/>
      <jar
        jarfile="${distpath.project}/${project.distname}.jar"
        basedir="${classes}"/>
      <copy
        file="${distpath.project}/${project.distname}.jar"
        todir="${distpath.project}"/>

      <war
        basedir="./"
        warfile="${distpath.project}/${project.distname}.war"
        webxml="web.xml">
        <exclude name="${distpath.project}/${project.distname}.war"/>
       </war>

    </target>

    <!-- compile and deploy to the folder specified in digijava.deploy -->
    <target name="deployDir" depends="compile"
    description="Compiles the source code, and moves the war into the deployment directory specified in the properties file">
        <mkdir dir="${digijava.deploy}/${project.distname}.war"/>
        <copy toDir="${digijava.deploy}/${project.distname}.war">
            <fileset dir="../">
                <exclude name="**/*.jpx" />
                <exclude name="**/*.library" />
                <exclude name="**/.*" />
            </fileset>
        </copy>
    </target>

	<target name="createCleanMySQLDatabase" depends="compile">
		<fail unless="clean.source" message="clean.source parameter must be supplied! This is the source database to produce ${clean.db} from."/>
		<fail unless="clean.host" message="clean.host parameter must be supplied! This is the dg_site_domain host that you want to use with it."/>
		<echo message="Dropping former ${clean.db} and creating new ${clean.db} database..."/>
		<sql driver="com.mysql.jdbc.Driver" password="${mysql.password}" url="${mysql.url}" userid="${mysql.user}" print="true">
			<classpath refid="compile.classpath"/>
			<transaction>DROP DATABASE IF EXISTS ${clean.db}</transaction>	
			<transaction>CREATE DATABASE ${clean.db}</transaction>		
		</sql>
		
		<echo message="Creating Hibernate table structure and keys..."/>
		<antcall target="database"/>
	
		<echo message="Exporting stored functions from ${clean.source}..."/>
		<sql driver="com.mysql.jdbc.Driver" password="${mysql.password}" url="${mysql.url}/mysql" userid="${mysql.user}" print="true" showheaders="false" showtrailers="false" output="tmp_${clean.db}_ddl_copy.sql">
			<classpath refid="compile.classpath"/>
			<transaction>SELECT concat('CREATE ',type,' ',name,' (',param_list,') RETURNS ',returns,' ',body, ';;') FROM proc WHERE db='${clean.source}'</transaction>
		</sql>
		<echo message="Exporting views from ${clean.source}..."/>
		<sql driver="com.mysql.jdbc.Driver" password="${mysql.password}" url="${mysql.url}/information_schema" userid="${mysql.user}" print="true" showheaders="false" showtrailers="false" output="tmp_${clean.db}_ddl_copy.sql" append="true">
			<classpath refid="compile.classpath"/>
			<transaction>SELECT concat('CREATE OR REPLACE VIEW ',table_name,' AS ',view_definition,';;') FROM views WHERE table_schema='${clean.source}'</transaction>
		</sql>
		<replace file="tmp_${clean.db}_ddl_copy.sql" token="`${clean.source}`." value=""/>
		
	

		<echo message="Copying mandatory data from  ${clean.source} into ${clean.db}..."/>
		<sql driver="com.mysql.jdbc.Driver" password="${mysql.password}" url="${mysql.url}/${clean.db}" userid="${mysql.user}" print="true">
			<classpath refid="compile.classpath"/>
			<transaction>INSERT INTO AMP_INDICATOR_RISK_RATINGS (SELECT * from ${clean.source}.AMP_INDICATOR_RISK_RATINGS)</transaction>
			<transaction>INSERT INTO amp_category_class (SELECT * from ${clean.source}.amp_category_class)</transaction>
			<transaction>INSERT INTO amp_category_value (SELECT * from ${clean.source}.amp_category_value)</transaction>
			<transaction>INSERT INTO amp_category_value_location (SELECT * from ${clean.source}.amp_category_value_location)</transaction>
			<transaction>INSERT INTO amp_columns (SELECT * from ${clean.source}.amp_columns)</transaction>
			<transaction>INSERT INTO amp_columns_order (SELECT * from ${clean.source}.amp_columns_order)</transaction>
			<transaction>INSERT INTO amp_columns_filters (SELECT * from ${clean.source}.amp_columns_filters)</transaction>
			<transaction>INSERT INTO amp_currency (SELECT * from ${clean.source}.amp_currency)</transaction>
			<transaction>INSERT INTO amp_global_settings (SELECT * from ${clean.source}.amp_global_settings)</transaction>
			<transaction>INSERT INTO amp_level (SELECT * from ${clean.source}.amp_level)</transaction>
			<transaction>INSERT INTO amp_measures (SELECT * from ${clean.source}.amp_measures)</transaction>
			<transaction>INSERT INTO amp_org_type (SELECT * from ${clean.source}.amp_org_type)</transaction>
			<transaction>INSERT INTO amp_quartz_job_class (SELECT * from ${clean.source}.amp_quartz_job_class)</transaction>
			<transaction>INSERT INTO amp_role (SELECT * from ${clean.source}.amp_role)</transaction>
			<transaction>INSERT INTO dg_countries (SELECT * from ${clean.source}.dg_countries)</transaction>
			<transaction>INSERT INTO dg_item_status (SELECT * from ${clean.source}.dg_item_status)</transaction>
			<transaction>INSERT INTO dg_locale (SELECT * from ${clean.source}.dg_locale)</transaction>
			<transaction>SET FOREIGN_KEY_CHECKS=0</transaction>
			<transaction>INSERT INTO dg_site (SELECT * from ${clean.source}.dg_site)</transaction>
			<transaction>INSERT INTO dg_module_instance (SELECT * from ${clean.source}.dg_module_instance)</transaction>
			<transaction>SET FOREIGN_KEY_CHECKS=1</transaction>
			<transaction>INSERT INTO dg_site_domain (SELECT * from ${clean.source}.dg_site_domain WHERE site_domain NOT LIKE '192.168%')</transaction>
			<transaction>UPDATE dg_site_domain SET site_domain='${clean.host}'</transaction>
			<transaction>INSERT INTO dg_principal_permission (SELECT * from ${clean.source}.dg_principal_permission)</transaction>
			<transaction>INSERT INTO dg_principal_permission_param (SELECT * from ${clean.source}.dg_principal_permission_param)</transaction>
			<transaction>INSERT INTO patch_file (SELECT * from ${clean.source}.patch_file)</transaction>
			<transaction>INSERT INTO amp_currency_rate (SELECT * from ${clean.source}.amp_currency_rate)</transaction>
			<transaction>INSERT INTO dg_message (SELECT * from ${clean.source}.dg_message)</transaction>
			<transaction>INSERT INTO amp_templates_visibility (SELECT * from ${clean.source}.amp_templates_visibility)</transaction>
			<transaction>SET FOREIGN_KEY_CHECKS=0</transaction>
			<transaction>INSERT INTO amp_modules_visibility (SELECT * from ${clean.source}.amp_modules_visibility)</transaction>
			<transaction>SET FOREIGN_KEY_CHECKS=1</transaction>
			<transaction>INSERT INTO amp_features_visibility (SELECT * from ${clean.source}.amp_features_visibility)</transaction>
			<transaction>INSERT INTO amp_fields_visibility (SELECT * from ${clean.source}.amp_fields_visibility)</transaction>
			<transaction>INSERT INTO dg_site_trans_lang_map (SELECT * from ${clean.source}.dg_site_trans_lang_map)</transaction>
			<transaction>INSERT INTO dg_site_user_lang_map (SELECT * from ${clean.source}.dg_site_user_lang_map)</transaction>
			<transaction>INSERT INTO amp_team_member_roles (SELECT * from ${clean.source}.amp_team_member_roles)</transaction>
			<transaction>INSERT INTO amp_fields_templates (SELECT * from ${clean.source}.amp_fields_templates)</transaction>
			<transaction>INSERT INTO amp_features_templates (SELECT * from ${clean.source}.amp_features_templates)</transaction>
			<transaction>INSERT INTO amp_modules_templates (SELECT * from ${clean.source}.amp_modules_templates)</transaction>
			<transaction>INSERT INTO amp_sector_scheme (SELECT * from ${clean.source}.amp_sector_scheme)</transaction>
			<transaction>INSERT INTO AMP_CLASSIFICATION_CONFIG (SELECT * from ${clean.source}.AMP_CLASSIFICATION_CONFIG)</transaction>
			<transaction>INSERT INTO dg_user (SELECT * from ${clean.source}.dg_user WHERE email='admin@amp.org')</transaction>
			<transaction>INSERT INTO dg_group (SELECT * from ${clean.source}.dg_group WHERE id IN (SELECT ug.group_id FROM  ${clean.source}.dg_user_group ug,  ${clean.source}.dg_user u WHERE u.id=ug.user_id and u.email='admin@amp.org'))</transaction>
			<transaction>INSERT INTO dg_user_group (SELECT * from ${clean.source}.dg_user_group WHERE user_id IN (SELECT ug.user_id FROM  ${clean.source}.dg_user_group ug,  ${clean.source}.dg_user u WHERE u.id=ug.user_id and u.email='admin@amp.org'))</transaction>
			<transaction>INSERT INTO dg_user_preferences (SELECT * from ${clean.source}.dg_user_preferences WHERE user_id IN (SELECT up.user_id FROM  ${clean.source}.dg_user_preferences up,  ${clean.source}.dg_user u where u.id=up.user_id and u.email="admin@amp.org"))</transaction>
			<transaction>INSERT INTO dg_user_lang_preferences (SELECT * from ${clean.source}.dg_user_lang_preferences WHERE user_id IN (SELECT up.user_id FROM ${clean.source}.dg_user_lang_preferences up, ${clean.source}.dg_user u where u.id=up.user_id and u.email="admin@amp.org"))</transaction>
			<transaction>INSERT INTO amp_fiscal_calendar (SELECT * from ${clean.source}.amp_fiscal_calendar WHERE amp_fiscal_cal_id IN (SELECT settingsValue FROM  ${clean.source}.amp_global_settings WHERE settingsName="Default Calendar"))</transaction>
			<transaction>INSERT INTO amp_application_settings (SELECT * from ${clean.source}.amp_application_settings WHERE fis_cal_id IN (SELECT id FROM  ${clean.source}.amp_global_settings WHERE settingsName="Default Calendar"))</transaction>
			<transaction>INSERT INTO amp_program_settings (SELECT * from ${clean.source}.amp_program_settings WHERE default_hierarchy=2)</transaction>
			<transaction>INSERT INTO amp_theme (SELECT * from ${clean.source}.amp_theme WHERE amp_theme_id IN (SELECT at.amp_theme_id FROM  ${clean.source}.amp_theme at,  ${clean.source}.amp_program_settings aps WHERE at.amp_theme_id=aps.default_hierarchy AND aps.default_hierarchy=2))</transaction>
			<transaction>CREATE TABLE util_global_settings_possible_ LIKE ${clean.source}.util_global_settings_possible_</transaction><transaction>INSERT INTO util_global_settings_possible_ (SELECT * from ${clean.source}.util_global_settings_possible_)</transaction>
			<transaction>CREATE TABLE qrtz_blob_triggers LIKE ${clean.source}.qrtz_blob_triggers</transaction><transaction>INSERT INTO qrtz_blob_triggers (SELECT * from ${clean.source}.qrtz_blob_triggers)</transaction>
			<transaction>CREATE TABLE qrtz_calendars LIKE ${clean.source}.qrtz_calendars</transaction><transaction> INSERT INTO qrtz_calendars (SELECT * from ${clean.source}.qrtz_calendars)</transaction>
			<transaction>CREATE TABLE qrtz_cron_triggers LIKE ${clean.source}.qrtz_cron_triggers</transaction><transaction>  INSERT INTO qrtz_cron_triggers (SELECT * from ${clean.source}.qrtz_cron_triggers)</transaction>
			<transaction>CREATE TABLE qrtz_fired_triggers  LIKE ${clean.source}.qrtz_fired_triggers</transaction><transaction> INSERT INTO qrtz_fired_triggers (SELECT * from ${clean.source}.qrtz_fired_triggers)</transaction>
			<transaction>CREATE TABLE qrtz_job_details LIKE ${clean.source}.qrtz_job_details</transaction><transaction> INSERT INTO qrtz_job_details (SELECT * from ${clean.source}.qrtz_job_details)</transaction>
			<transaction>CREATE TABLE qrtz_job_listeners LIKE ${clean.source}.qrtz_job_listeners</transaction><transaction> INSERT INTO  qrtz_job_listeners(SELECT * from ${clean.source}.qrtz_job_listeners)</transaction>
			<transaction>CREATE TABLE qrtz_locks LIKE ${clean.source}.qrtz_locks</transaction><transaction>INSERT INTO qrtz_locks (SELECT * from ${clean.source}.qrtz_locks)</transaction>
			<transaction>CREATE TABLE qrtz_paused_trigger_grps LIKE ${clean.source}.qrtz_paused_trigger_grps</transaction><transaction> INSERT INTO qrtz_paused_trigger_grps (SELECT * from ${clean.source}.qrtz_paused_trigger_grps)</transaction>																									
			<transaction>CREATE TABLE qrtz_scheduler_state LIKE ${clean.source}.qrtz_scheduler_state</transaction><transaction>INSERT INTO qrtz_scheduler_state (SELECT * from ${clean.source}.qrtz_scheduler_state)</transaction>
			<transaction>CREATE TABLE qrtz_simple_triggers LIKE ${clean.source}.qrtz_simple_triggers</transaction><transaction>INSERT INTO qrtz_simple_triggers (SELECT * from ${clean.source}.qrtz_simple_triggers)</transaction>
			<transaction>CREATE TABLE qrtz_trigger_listeners LIKE ${clean.source}.qrtz_trigger_listeners</transaction><transaction>INSERT INTO qrtz_trigger_listeners (SELECT * from ${clean.source}.qrtz_trigger_listeners)</transaction>
			<transaction>CREATE TABLE qrtz_triggers LIKE ${clean.source}.qrtz_triggers</transaction><transaction>INSERT INTO qrtz_triggers (SELECT * from ${clean.source}.qrtz_triggers)</transaction>
			
			<!-- mandatory custom indexes -->
			<transaction>ALTER TABLE amp_category_value ADD INDEX cv_index(category_value)</transaction>
			<transaction>CREATE INDEX amp_currency_to_currency_code ON amp_currency_rate(to_currency_code)</transaction>
			<transaction>CREATE INDEX amp_currency_exchange_rate_date ON amp_currency_rate(exchange_rate_date)</transaction>
			<transaction>CREATE INDEX amp_currency_exchange_rate_date_to_currency_idx ON amp_currency_rate(exchange_rate_date, to_currency_code)</transaction>
			
		</sql>
		
		<echo message="Importing functions and views into ${clean.db}..."/>
			<sql driver="com.mysql.jdbc.Driver" password="${mysql.password}" url="${mysql.url}/${clean.db}" userid="${mysql.user}" print="true" delimiter=";;">
				<classpath refid="compile.classpath"/>	
				<transaction src="tmp_${clean.db}_ddl_copy.sql"/> 
			</sql>
		
		<delete file="tmp_${clean.db}_ddl_copy.sql"/>
	</target>
	
	<target name="deployForServer" description="deploys the project for use with a given database">
		<delete file="${repository}/digi.xml"/>
		<delete file="${webinf}/jboss-web.xml"/>
		<delete dir="${jackrabbit}"/>
		<copy file="${deployConfigs}/${serverName}/digi.xml" todir="${repository}"/>
		<copy file="${deployConfigs}/${serverName}/jboss-web.xml" todir="${webinf}"/>		
		<copy file="${webinf}/repository.xml" todir="${jackrabbit}"/>
		<antcall target="copyForAnySQL"/>
	</target>
	
	<target name="copyForAnySQL">
		<condition property="dbName" value="mysql">
		 	<not>
		 		<isset property="dbName"/>                              
		 	</not>
		 </condition>
		 <echo message="Using ${dbName} Configuration" />
		<copy file="${dbConfigs}/${dbName}/hibernate-dialect.xml" todir="${src}" overwrite="true"/>
		<copy file="${dbConfigs}/${dbName}/refresh_mondrian_cache.sql" todir="${RefreshMondrian}" overwrite="true"/>
		<copy file="${dbConfigs}/${dbName}/AMP.xml" todir="${MondrianConfig}" overwrite="true"/>
	</target>	


	<target name="junit" depends="compileTest">
        <junit printsummary="yes" haltonfailure="yes" showoutput="yes">
    	    <classpath refid="run.classpath"/>
  		<formatter type="xml"/>
  		<formatter type="plain"/>
  		<test name="org.digijava.test.AllTests" haltonfailure="no" outfile="test_result"/>
	</junit>
    </target>

    <target name="restart" description="restarts the web application">
    	<touch file="${webinf}/web.xml"/>
    </target>


    <!-- Build project and create distribution-->
    <target name="all" depends="project,dist"/>
	
	<target name="ecsJar" description="ECS Client Jar">
		<jar destfile="ecs-client.jar" 
			 basedir="${classes}" 
			 includes="**/*.class"
			 />
	</target>

	<target name="patchDemo" description="Patch for applying GIS PDF to Demo Site">
		<touch file="${deployConfigs}/${serverName}/headermiddle_gis_pdf.patch"/>
		<patch patchfile="${deployConfigs}/${serverName}/headermiddle_gis_pdf.patch" originalfile="TEMPLATE/ampTemplate/layout/headerMiddle.jsp"/>
	</target>

</project>
