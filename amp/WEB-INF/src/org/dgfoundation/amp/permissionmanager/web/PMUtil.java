/**
 * 
 */
package org.dgfoundation.amp.permissionmanager.web;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.apache.wicket.model.IModel;
import org.dgfoundation.amp.permissionmanager.components.features.models.AmpPMGateWrapper;
import org.dgfoundation.amp.permissionmanager.components.features.models.AmpTreeVisibilityModelBean;
import org.dgfoundation.amp.visibility.AmpObjectVisibility;
import org.digijava.kernel.exception.DgException;
import org.digijava.kernel.persistence.PersistenceManager;
import org.digijava.module.aim.dbentity.AmpModulesVisibility;
import org.digijava.module.aim.dbentity.AmpTemplatesVisibility;
import org.digijava.module.gateperm.core.CompositePermission;
import org.digijava.module.gateperm.core.GatePermConst;
import org.digijava.module.gateperm.core.GatePermission;
import org.digijava.module.gateperm.core.Permission;
import org.digijava.module.gateperm.core.PermissionMap;
import org.digijava.module.gateperm.gates.OrgRoleGate;
import org.digijava.module.gateperm.gates.UserLevelGate;
import org.digijava.module.gateperm.util.PermissionUtil;
import org.hibernate.HibernateException;
import org.hibernate.Session;

/**
 * @author dan
 *
 */
public final class PMUtil {

	public static final String CUMMULATIVE = "Cummulative";
	public static final String WORKSPACE_PERMISSION = "Workspace based permission";
	public static final String ROLE_PERMISSION = "Role based permission";
	
	public static void setGlobalPermission(Class globalPermissionMapForPermissibleClass, Permission permission,String simpleName) {
		// TODO Auto-generated method stub
		Session hs=null;
		try {
			hs = PermissionUtil.saveGlobalPermission(globalPermissionMapForPermissibleClass, permission.getId(), simpleName);
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (DgException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(hs!=null){
			//pf.setPermissionId(new Long(0));
			try {
				PersistenceManager.releaseSession(hs);
			} catch (HibernateException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}
	
	
	
	
	public static void savePermission(IModel<CompositePermission> cpModel, Set<AmpPMGateWrapper> gatesSet) throws DgException {
		// TODO Auto-generated method stub
		Session session=null;
		try {
			session = PersistenceManager.getSession();
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		PermissionMap permissionMap=new PermissionMap(); 
		permissionMap.setPermissibleCategory(null);
		permissionMap.setObjectIdentifier(null);
		
//		CompositePermission cp=new CompositePermission(false);
//		cp.setDescription("This permission was created using the PM UI by admin user");
//		cp.setDedicated(false);
//		cp.setName(cpModel.getObject().getName());
		
		cpModel.getObject().setDescription("This permission was created using the PM UI by admin user");
		cpModel.getObject().setDedicated(false);
		
		
		for (AmpPMGateWrapper ampPMGateWrapper : gatesSet) {
			initializeAndSaveGatePermission(session,cpModel.getObject(),ampPMGateWrapper);
		}
		
		session.save(cpModel.getObject());
		
		permissionMap.setPermission(cpModel.getObject());
		
		session.save(permissionMap);
		
		session.flush();
		
	}
	public static void initializeAndSaveGatePermission(Session session, CompositePermission cp, AmpPMGateWrapper ampPMGateWrapper) throws HibernateException {
		initializeAndSaveGatePermission(session, cp, cp.getName()+" - "+ampPMGateWrapper.getName(), 
				ampPMGateWrapper.getParameter(), ampPMGateWrapper.getGate(),ampPMGateWrapper.getEditFlag()?"on":"off",
						ampPMGateWrapper.getReadFlag()?"on":"off", "This permission has been generated by the Permission Manager UI");
	}
	
	public static void initializeAndSaveGatePermission(Session session,CompositePermission cp,String permissionName,String parameter, Class gate,String readFlag,String editFlag, String description) throws HibernateException {
		GatePermission baGate=new GatePermission(true);
		baGate.setName(permissionName);
		baGate.setDescription(description);
		baGate.getGateParameters().add(parameter);
		baGate.setGateTypeName(gate.getName());
		HashSet baActions=new HashSet();
		if("on".equals(editFlag)) baActions.add(GatePermConst.Actions.EDIT);
		if("on".equals(readFlag)) baActions.add(GatePermConst.Actions.VIEW);
		baGate.setActions(baActions);
		if(baGate.getActions().size()>0) { 
			session.save(baGate);
			cp.getPermissions().add(baGate);
		}
	}
	
	public static void deletePermissionMap(PermissionMap permissionMap, Session session){
	    Permission p=permissionMap.getPermission();
	    //we delete the old permissions, if they are dedicated
	    if (p!=null && p.isDedicated()) {
		CompositePermission cp = (CompositePermission)p;
		Iterator<Permission> i = cp.getPermissions().iterator();
		while (i.hasNext()) {
		    Permission element = (Permission) i.next();
		    Object object = session.load(Permission.class, element.getId());
		    session.delete(object);
		}
		Object object = session.load(Permission.class, cp.getId());
		session.delete(object);
	    }
	    session.flush();
	}




	public static void deleteCompositePermission(CompositePermission cp, Session session) {
		// TODO Auto-generated method stub
		session.flush();	
		Iterator<Permission> i = cp.getPermissions().iterator();
		while (i.hasNext()) {
		    Permission element = (Permission) i.next();
		    Object object = session.load(Permission.class, element.getId());
		    session.delete(object);
		}
		Object object = session.load(Permission.class, cp.getId());
		session.delete(object);
	    session.flush();		
	}




	public static void assignGlobalPermission(PermissionMap pm, Set<AmpPMGateWrapper> gatesSet) {
		// TODO Auto-generated method stub
		Session session = null;
			try {
				session = PersistenceManager.getRequestDBSession();
			} catch (DgException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		if(pm!=null && session!=null) {
		    Permission p=pm.getPermission();
		    //we delete the old permissions, if they are dedicated
		    if (p!=null) {
		    String name = p.getName();
			CompositePermission cp = (CompositePermission)p;
			if(cp.getId()!=null) 
				PMUtil.deleteCompositePermission(cp, session);
			
			cp=new CompositePermission(false);
			cp.setDescription("This permission was created using the PM UI by admin user");
			cp.setName(name);
			
			for (AmpPMGateWrapper ampPMGateWrapper : gatesSet) {
				initializeAndSaveGatePermission(session,cp,ampPMGateWrapper);
			}
			session.save(cp);
			pm.setPermission(cp);
			session.save(pm);
			session.flush();
		    }
		}
	}
	
	
	public static AmpTreeVisibilityModelBean buildAmpTreeFMPermissions(AmpTemplatesVisibility currentTemplate) {
		// TODO Auto-generated method stub
		AmpTreeVisibilityModelBean tree = new AmpTreeVisibilityModelBean("ROOT", new ArrayList<Object>());
		if (currentTemplate.getAllItems() != null && currentTemplate.getAllItems().iterator() != null)
				for (Iterator it = currentTemplate.getSortedAlphaAllItems().iterator(); it.hasNext();) {
					AmpModulesVisibility module = (AmpModulesVisibility) it.next();
					if(module.getParent()==null) 
						{
							tree.getItems().add(new AmpTreeVisibilityModelBean(module.getName(),buildAmpSubTreeFMPermission(module)));
						}
				}
		return tree;
	}
	
	public static List<Object> buildAmpSubTreeFMPermission(AmpObjectVisibility aov){
		List<Object> list = new ArrayList<Object>();
		Set itemsSet=null;
		if(aov instanceof AmpModulesVisibility && ((AmpModulesVisibility) aov).getSortedAlphaSubModules().size()>0)
			itemsSet = ((AmpModulesVisibility) aov).getSortedAlphaSubModules();
		else itemsSet = aov.getSortedAlphaItems();
		if(itemsSet!=null)
			for (Iterator it = itemsSet.iterator(); it.hasNext();) {
				AmpObjectVisibility item = (AmpObjectVisibility) it.next();
				AmpTreeVisibilityModelBean iitem = new AmpTreeVisibilityModelBean(item.getName(),buildAmpSubTreeFMPermission(item));
				list.add(iitem);
			}
		return list;
	}

}
