<?xml version="1.0" encoding="UTF-8"?>
<tns:patch closeOnSuccess="true" retryOnFail="false" xmlns:tns="http://docs.ampdev.net/schemas/xmlpatcher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://docs.ampdev.net/schemas/xmlpatcher ../doc/xmlpatcher.xsd ">
    <jira>AMP-7526</jira>
    <keyword>indicators</keyword>
    <keyword>risks</keyword>
    <author>Medea Gugushvili</author>
    <description>remove old risk column and drop unused amp_indicator_risk_ratings table.</description>

    <trigger type="all">
         <condition type="tableOrViewExists">amp_indicator_risk_ratings</condition>
    </trigger>

    <apply>
        <script>
              <lang type="mysql" delimiter=";">
                Insert into amp_category_class(category_name,keyName,is_multiselect,is_ordered)
                select "Indicator Risk","indicator_risk",false,false from dual where not exists (select id from amp_category_class where keyName="indicator_risk");
                SET @classId=(select id from amp_category_class where keyName="indicator_risk");
                SET @riskCount=-1;
                Insert into amp_category_value(category_value,amp_category_class_id,index_column,field_type)
                select rating_name,@classId,@riskCount:=@riskCount+1,0 from amp_indicator_risk_ratings where rating_name not in (select category_value from amp_category_value where amp_category_class_id =@classId);
                UPDATE amp_indicator_values ind, amp_category_value val,amp_indicator_risk_ratings risk SET ind.risk_value = val.id WHERE ind.risk =risk.amp_ind_risk_ratings_id  and val.category_value=risk.rating_name;
            </lang>
        </script>
        <script>
            <lang  delimiter="$" type="mysql">
                DROP PROCEDURE IF EXISTS removeOldColumn$
                CREATE PROCEDURE removeOldColumn(IN tbName VARCHAR(255), IN clName VARCHAR(255))  MODIFIES SQL DATA
                BEGIN
                DECLARE done INT DEFAULT 0;
                DECLARE keyFK varchar(255);
                DECLARE cur1 CURSOR FOR select CONSTRAINT_NAME from information_schema.KEY_COLUMN_USAGE where TABLE_NAME =tbName and COLUMN_NAME like clName and TABLE_SCHEMA =(SELECT database());
                DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
                OPEN cur1;
                REPEAT
                FETCH cur1 INTO keyFK;
                IF NOT done THEN
                SET @s = concat('alter table  ', tbName,'  DROP FOREIGN KEY  ',keyFK,';');
                prepare stmt from @s;
                execute stmt;
                DEALLOCATE prepare stmt;
                END IF;
                UNTIL done END REPEAT;
                CLOSE cur1;
                SET @s = concat('alter table  ', tbName,'  drop column  ',clName ,';');
                prepare stmt from @s;
                execute stmt;
                DEALLOCATE prepare stmt;
                END$
                call removeOldColumn('amp_indicator_values','risk')$
                call removeOldColumn('amp_indicator_connection','risk')$
                call removeOldColumn('amp_indicator','risk')$
                call removeOldColumn('amp_me_indicator_value','risk')$
                DROP TABLE IF EXISTS amp_me_indicator_value$
                DROP TABLE IF EXISTS AMP_INDICATOR_SECTORS$
                DROP TABLE IF EXISTS AMP_INDICATOR_PROJECT$
                DROP TABLE IF EXISTS amp_theme_indicator_value$
                DROP TABLE IF EXISTS amp_indicators$
                DROP TABLE IF EXISTS amp_theme_indicator$
                DROP TABLE IF EXISTS amp_indicators$
                DROP TABLE IF EXISTS amp_indicator_risk_ratings$
            </lang>
        </script>
    </apply>
</tns:patch>
