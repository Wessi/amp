<?xml version="1.0" encoding="UTF-8"?>
<tns:patch closeOnSuccess="false" retryOnFail="true"
	xmlns:tns="http://docs.ampdev.net/schemas/xmlpatcher" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://docs.ampdev.net/schemas/xmlpatcher ../doc/xmlpatcher.xsd ">
	<jira>AMP-18110</jira>
	<keyword>Views</keyword>
	<author>Constantin Dolghier</author>
	<description>recreate view, this will always be the last version of the view</description>
	<trigger type="all">
		<condition type="custom">
			<script returnVar="val">
				<lang type="sql">
					SELECT settingsvalue FROM amp_global_settings where settingsname='Recreate the views on the next server restart';
				</lang>
			</script>
 			<test>val.equalsIgnoreCase("true")</test>
		</condition>
	</trigger>
	<apply>
		<script>
			<lang delimiter=";" type="postgres">
				DROP VIEW IF EXISTS v_mondrian_raw_donor_transactions;
			    CREATE OR REPLACE VIEW v_mondrian_raw_donor_transactions AS 
SELECT  <!-- regular transactions -->
	aa.amp_activity_id AS amp_activity_id,
	fd.amp_fund_detail_id AS amp_fund_detail_id,
	fd.transaction_type AS transaction_type,
	fd.adjustment_type AS adjustment_type,
	fd.transaction_date AS transaction_date,
	to_char(fd.transaction_date, 'J')::integer AS date_code,

	CASE
		WHEN (fd.amp_currency_id != (SELECT amp_currency_id FROM amp_currency WHERE currency_code = (SELECT settingsvalue FROM amp_global_settings WHERE settingsname = 'Base Currency'))) AND (fd.fixed_exchange_rate IS NOT NULL) AND (fd.fixed_exchange_rate > 0) THEN fd.transaction_amount / fd.fixed_exchange_rate 
		ELSE fd.transaction_amount 
	END as transaction_amount,
	CASE 
		WHEN (fd.amp_currency_id != (SELECT amp_currency_id FROM amp_currency WHERE currency_code = (SELECT settingsvalue FROM amp_global_settings WHERE settingsname = 'Base Currency'))) AND (fd.fixed_exchange_rate IS NOT NULL) AND (fd.fixed_exchange_rate > 0) THEN 
			(SELECT amp_currency_id FROM amp_currency WHERE currency_code = (SELECT settingsvalue FROM amp_global_Settings WHERE settingsname = 'Base Currency')) 
		ELSE fd.amp_currency_id
	END as currency_id,	
	
	CASE WHEN src_role.role_code='DN' THEN f.amp_donor_org_id ELSE 999888777 END AS donor_id,
	f.financing_instr_category_value AS financing_instrument_id,
	f.type_of_assistance_category_va AS terms_of_assistance_id,
	f.funding_status_category_va AS funding_status_id,
	f.mode_of_payment_category_va AS mode_of_payment_id,
	
	(SELECT max(amp_status_id) FROM v_status vs WHERE vs.amp_activity_id = aa.amp_activity_id) status_id,
	(SELECT max(level_code) FROM v_modalities vm WHERE vm.amp_activity_id = aa.amp_activity_id) modality_id,
	(SELECT max(level_code) FROM v_type_of_cooperation vtoc WHERE vtoc.amp_activity_id = aa.amp_activity_id) type_of_cooperation_id,
	(SELECT max(level_code) FROM v_type_of_implementation vtoi WHERE vtoi.amp_activity_id = aa.amp_activity_id) type_of_implementation_id,
	(SELECT max(id) FROM v_procurement_system vps WHERE vps.amp_activity_id = aa.amp_activity_id) procurement_system_id,
    fd.capital_spend_percent AS capital_spend_percent, 
     
	src_role.role_code AS src_role,
	dest_role.role_code AS dest_role,
	fd.recipient_org_id AS dest_org_id
          
	FROM amp_activity aa JOIN amp_funding f ON aa.amp_activity_id = f.amp_activity_id
		JOIN amp_funding_detail fd ON f.amp_funding_id = fd.amp_funding_id
		LEFT JOIN amp_role src_role ON src_role.amp_role_id = f.source_role_id
		LEFT JOIN amp_role dest_role ON dest_role.amp_role_id = fd.recipient_role_id
		
	WHERE (transaction_date BETWEEN '1970-1-1' AND '2050-1-1')
UNION ALL
SELECT <!-- MTEFs -->
	aa.amp_activity_id AS amp_activity_id,
	mf.amp_fund_mtef_projection_id AS amp_fund_detail_id,
	3 AS transaction_type,
	999 AS adjustment_type,
	mf.projection_date AS transaction_date,
	to_char(mf.projection_date, 'J')::integer AS date_code,
	mf.amount AS transaction_amount,
	mf.amp_currency_id AS currency_id,	
	
	CASE WHEN src_role.role_code='DN' THEN f.amp_donor_org_id ELSE 999888777 END AS donor_id,
	f.financing_instr_category_value AS financing_instrument_id,
	f.type_of_assistance_category_va AS terms_of_assistance_id,
	f.funding_status_category_va AS funding_status_id,
	f.mode_of_payment_category_va AS mode_of_payment_id,
	
	(SELECT max(amp_status_id) FROM v_status vs WHERE vs.amp_activity_id = aa.amp_activity_id) status_id,
	(SELECT max(level_code) FROM v_modalities vm WHERE vm.amp_activity_id = aa.amp_activity_id) modality_id,
	(SELECT max(level_code) FROM v_type_of_cooperation vtoc WHERE vtoc.amp_activity_id = aa.amp_activity_id) type_of_cooperation_id,
	(SELECT max(level_code) FROM v_type_of_implementation vtoi WHERE vtoi.amp_activity_id = aa.amp_activity_id) type_of_implementation_id,
	(SELECT max(id) FROM v_procurement_system vps WHERE vps.amp_activity_id = aa.amp_activity_id) procurement_system_id,
     
    null AS capital_spend_percent,
    
	src_role.role_code AS src_role,
	cast (NULL as text) as dest_role,
	cast (NULL as bigint) as dest_org_id
          
	FROM amp_activity aa JOIN amp_funding f ON aa.amp_activity_id = f.amp_activity_id
		JOIN amp_funding_mtef_projection mf ON f.amp_funding_id = mf.amp_funding_id
		LEFT JOIN amp_role src_role ON src_role.amp_role_id = f.source_role_id
	WHERE (mf.projection_date BETWEEN '1970-1-1' AND '2050-1-1')
UNION ALL
SELECT <!-- undefined donor -->
	aav.amp_activity_id AS amp_activity_id,
	900000000 + aav.amp_activity_id AS amp_fund_detail_id,
	999 AS transaction_type,
	(SELECT acv.id FROM amp_category_value acv WHERE acv.category_value='Actual' AND acv.amp_category_class_id = (SELECT acc.id FROM amp_category_class acc WHERE acc.keyname = 'adjustment_type')) AS adjustment_type,
	'1970-01-01' AS transaction_date,
	to_char(to_date('2014-01-01', 'YYYY-MM-DD'), 'J')::integer AS date_code,

	100 AS transaction_amount,

	(SELECT amp_currency_id FROM amp_currency WHERE currency_code = (SELECT settingsvalue FROM amp_global_Settings WHERE settingsname = 'Base Currency')) AS currency_id,
	(999999999) AS donor_id,
	(SELECT min(acv.id) FROM amp_category_value acv WHERE acv.amp_category_class_id = (SELECT acc.id FROM amp_category_class acc WHERE acc.keyname = 'financing_instrument')) AS financing_instrument_id,
	(SELECT min(acv.id) FROM amp_category_value acv WHERE acv.amp_category_class_id = (SELECT acc.id FROM amp_category_class acc WHERE acc.keyname = 'type_of_assistence')) AS terms_of_assistance_id,
	(SELECT min(acv.id) FROM amp_category_value acv WHERE acv.amp_category_class_id = (SELECT acc.id FROM amp_category_class acc WHERE acc.keyname = 'funding_status')) AS funding_status_id,
	(SELECT min(acv.id) FROM amp_category_value acv WHERE acv.amp_category_class_id = (SELECT acc.id FROM amp_category_class acc WHERE acc.keyname = 'mode_of_payment')) AS mode_of_payment_id,
	
	(SELECT min(acv.id) FROM amp_category_value acv WHERE acv.amp_category_class_id = (SELECT acc.id FROM amp_category_class acc WHERE acc.keyname = 'activity_status')) AS status_id,
	(SELECT min(acv.id) FROM amp_category_value acv WHERE acv.amp_category_class_id = (SELECT acc.id FROM amp_category_class acc WHERE acc.keyname = 'modalities')) AS modality_id,
	(SELECT min(acv.id) FROM amp_category_value acv WHERE acv.amp_category_class_id = (SELECT acc.id FROM amp_category_class acc WHERE acc.keyname = 'SSC_type_of_cooperation')) AS type_of_cooperation_id,
	(SELECT min(acv.id) FROM amp_category_value acv WHERE acv.amp_category_class_id = (SELECT acc.id FROM amp_category_class acc WHERE acc.keyname = 'SSC_type_of_implementation')) AS type_of_implementation_id,
	(SELECT min(acv.id) FROM amp_category_value acv WHERE acv.amp_category_class_id = (SELECT acc.id FROM amp_category_class acc WHERE acc.keyname = 'procurement_system')) AS  procurement_system_id,
     
    null AS capital_spend_percent,
     
	'DN' AS src_role,
	cast (NULL as text) as dest_role,
	cast (NULL as bigint) as dest_org_id
          
	FROM amp_activity_version aav
	WHERE 
		(NOT EXISTS (
			select * from amp_funding_detail afd 
				JOIN amp_funding af ON afd.amp_funding_id = af.amp_funding_id AND af.amp_activity_id = aav.amp_activity_id 
				JOIN amp_role src_role ON src_role.amp_role_id = af.source_role_id AND src_role.role_code='DN' )) 
			AND 
		(NOT EXISTS (
			select * from amp_funding_mtef_projection mf 
				JOIN amp_funding af ON mf.amp_funding_id = af.amp_funding_id AND af.amp_activity_id = aav.amp_activity_id
				JOIN amp_role src_role ON src_role.amp_role_id = af.source_role_id AND src_role.role_code='DN' ));

			</lang>
		</script>
	</apply>
</tns:patch>