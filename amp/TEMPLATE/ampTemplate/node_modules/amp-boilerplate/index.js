var fs = require('fs');
var _ = require('underscore');
var Backbone = require('backbone');
//loading hacks
var jQuery = require('jquery');
window.jQuery = window.$ = Backbone.$ = jQuery;

var bootstrap_enabled = (typeof $().modal == 'function');

if (bootstrap_enabled) {
  require('bootstrap/dist/js/bootstrap');
}

var MenuView = require('./src/views/menu-view.js');
var HeaderFooterView = require('./src/views/header-footer-view.js');
var Translator = require('amp-translate');


/* example of use
 * this.menus = new Menus({
 *   translator: this.translator,
 *   caller: 'GIS'
 * });
 */


function Widget() {
  this.initialize.apply(this, arguments);
}

_.extend(Widget.prototype, Backbone.Events, {
	initialize: function(options) {
    options = _.defaults(options, {isOnlyFooter:false,isOnlyHeader:false,showFooterAdmin:true});
    if (_.has(options, 'sync')) {
      Backbone.sync = options.sync;
    }
    var defaultKeys = JSON.parse(fs.readFileSync(__dirname +
    	    '/src/services/initial-translation-request.json', 'utf8'));
    this.translator = new Translator({defaultKeys: defaultKeys});
    options.translator = this.translator;
    this.menu = new MenuView(options);
    this.headerFooter = new HeaderFooterView(options);
   
    this.listenTo(this.headerFooter, 'all', function() {
      this.trigger.apply(this, arguments);
    });
    this.listenTo(this.menu, 'all', function() {
        this.trigger.apply(this, arguments);
      });
    var self = this;
    $.when(this.menu.menuRendered,this.headerFooter.layoutFetched).then(function() {
    	self.headerFooter.refreshUserSection();
    	self.translator.translateDOM(document);
    	if ($.fn.dropdown !== undefined) {
    		$('.dropdown-toggle').dropdown();
    	}
    });
  },

});


module.exports = {
  layout: Widget
};
window.boilerplate = Widget;
