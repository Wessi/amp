var fs = require('fs');
var $ = require('jquery');
var _ = require('underscore');
var Backbone = require('backbone');

var TopLevelFilterView = require('../views/top-level-filter-view');
var AllFilterCollection = require('../collections/all-filters-collection');


var Template = fs.readFileSync(__dirname + '/../templates/filters-content-template.html', 'utf8');
var TitleTemplate = fs.readFileSync(__dirname + '/../templates/filter-title-template.html', 'utf8');

module.exports = Backbone.View.extend({
  id: 'tool-filters',
  name: 'Filters',
  apiURL: '/rest/filters',

  events: {
    'click .apply': 'applyFilters',
    'click .cancel': 'cancel',
    'click .reset': 'resetFilters'
  },

  // collection of top-level-filter views..
  filterViewsInstances:{},

  template: _.template(Template),
  titleTemplate: _.template(TitleTemplate),

  initialize:function(options) {
    var self = this;
    this.draggable = options.draggable;
    this.translator = options.translator;

    this.firstRender = true;

    // Create top level views
    this._createTopLevelFilterViews();

    this.allFilters = new AllFilterCollection();
    this._loaded =  this.allFilters._loaded;
    this._getFilterList().then(function() {
      self.allFilters.each(function(model) {
        self._createFilterViews(model);
      });
      return this;
    });

  },

  _createTopLevelFilterViews: function() {
    this.filterViewsInstances = {
      donors: new TopLevelFilterView({name:'Funding Organizations'}),
      sectors: new TopLevelFilterView({name:'Sector'}),
      programs: new TopLevelFilterView({name:'Programs'}),
      activity: new TopLevelFilterView({name:'Activity'}),
      allAgencies: new TopLevelFilterView({name:'All Agencies'}),
      financials: new TopLevelFilterView({name:'Financial'}),
      others: new TopLevelFilterView({name:'Other'})
    };
  },


  render: function() {
    var self = this;
    this.$el.addClass('panel panel-primary');
    if (this.draggable) {
      this.$el.draggable({ cancel: '.panel-body, .panel-footer', cursor: 'move'  });
    }

    if (this.firstRender) {
      this.$el.html(this.template({}));
      this.$el.show();

      this._getFilterList().done(function() {
        self.renderFilters();

        // setup any popovers as needed...
        self.popovers = self.$('[data-toggle="popover"]');
        self.popovers.popover();

        // Translate if available.
        if (self.translator) {
          self.translator.translateDOM(self.el);
        }
      });

      this.firstRender = false;
    }

    return this;
  },


  renderFilters: function() {
    this.$('.filter-options').html('');

    for (var filterView in this.filterViewsInstances) {
      if (this.filterViewsInstances.hasOwnProperty(filterView)) {
        var tmpFilterView = this.filterViewsInstances[filterView];
        this.$('.filter-titles').append(tmpFilterView.renderTitle().titleEl);

        //...render bodies on click, not all at once...doesn't seem critical right now...
        this.$('.filter-options').append(tmpFilterView.renderFilters().el);
      }
    }

    this.$('.filter-titles a:first').tab('show');
  },


  _getFilterList: function() {
    return this.allFilters.load();
  },

  _createFilterViews: function(tmpModel) {
    // TODO: magic strings are dangerous, config somewhere...
    switch (tmpModel.get('group')) {
      case 'ActivityBudgetList':
      case 'TypeOfAssistanceList':
      case 'FinancingInstrumentsList':
        this.filterViewsInstances.financials.filterCollection.add(tmpModel);
        break;
      case 'ActivityStatusList':
      case 'ActivityApprovalStatus':
        this.filterViewsInstances.activity.filterCollection.add(tmpModel);
        break;
      case 'Programs':
        this.filterViewsInstances.programs.filterCollection.add(tmpModel);
        break;
      case 'Sectors':
        this.filterViewsInstances.sectors.filterCollection.add(tmpModel);
        break;
      case 'Donor':
        this.filterViewsInstances.donors.filterCollection.add(tmpModel);
        break;
      case 'Role':
        this.filterViewsInstances.allAgencies.filterCollection.add(tmpModel);
        break;
      default:
        this.filterViewsInstances.others.filterCollection.add(tmpModel);
    }

  },


  //TODO: move from view to all-collection
  serialize: function(options) {
    var self = this;
    var serializedFilters = {'columnFilters':{}, 'otherFilters':{} };

    this.allFilters.each(function(filter) {
      //TODO: build a util for bettermerge that concat's array if duplicate keys in objects...
      if(filter.get('name') === 'Dates'){
        _.extend(serializedFilters.otherFilters, filter.serialize(options));
      } else{
        _.extend(serializedFilters.columnFilters, filter.serialize(options));
      }
    });

    //remove empty / false values.
    _.each(serializedFilters, function(v, k) {
      if(!v || _.isEmpty(v)) {
        delete serializedFilters[k];
      }
    });

    return serializedFilters;
  },

  deserialize: function(blob, options) {
    if (blob) {
      this.allFilters.each(function(filter) {
        if(filter.get('name') === 'Dates'){
          filter.deserialize(blob.otherFilters);
        } else{
          filter.deserialize(blob.columnFilters);
        }
      });
    } else {
      console.warn('could not deserialize blob:', blob);
    }
    if (!options || !options.silent) {
      this.applyFilters();  // triggers the "apply" event
    }
  },

  showFilters: function() {
    this.render();
    this.filterStash = null;  // in case they haven't loaded yet, don't try to .serialize()
    this._loaded.done(_.bind(function() { this.filterStash = this.serialize({}); }, this));
  },

  resetFilters: function() {
    this.allFilters.each(function(filter) {
      filter.reset();
    });
  },

  applyFilters: function() {
    this._loaded.done(_.bind(function() { 
      var state = this.serialize({});
      this.trigger('apply', state); 
    }, this));
  },

  cancel: function() {
    if(this.filterStash){
      this.deserialize(this.filterStash, {silent: true});
    }
    this.trigger('cancel', this.filterStash);
  }
});

