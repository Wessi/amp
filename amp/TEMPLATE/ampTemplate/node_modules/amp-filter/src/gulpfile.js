var runSequence = require('run-sequence');
var browserify = require('browserify');
var source = require('vinyl-source-stream');
var gulp = require('gulp');
var del = require('del');
var $ = require('gulp-load-plugins')();


var paths = {
  root: './src',
  ampRoot: '../../../../',
  images: './img/**/*.{png,jpg,jpeg,gif,svg}',
  dist: './../dist/',
  stylesheets: {
	    entry: './less/amp-filters.less',
	    compiled: './compiled-css/',
	    sources: ['./less/**/*.less'],
	  },
  scripts: {
    entry: './main.js',
    compiled: './compiled-js/',
    sources: [
              './src/collections/*.js',
              './src/models/*.js',
		      './src/tree/*.js',
		      './src/views/*.js',
		      './src/lib/*.js',
		      './gulpfile.js'
		      ]
  }
};

function _browserifier(entry, destFolder, destName, options) {
  var bundler = browserify(entry, options);
  bundler.transform('brfs');
  var bundle = function() {
    $.util.log('bundle: start');
    return bundler.bundle()
      .on('end', function() { $.util.log('bundle: finished'); })
      .on('error', function(e) { $.util.log('bundle: error: ', e); })
      .pipe(source(destName))
      .pipe(gulp.dest(destFolder));
  };

  return {
    bundler: bundler,
    bundle: bundle
  };
}


gulp.task('browserify', function() {
  var stuff = _browserifier(paths.scripts.entry,
    paths.scripts.compiled, 'amp-filter.js',{debug: true, standalone: 'amp-filter'});
  return stuff.bundle();
});


gulp.task('clean', function() {
  return del(paths.dist, { force: true });
});


gulp.task('build-js', ['browserify'], function() {
  return gulp.src(paths.scripts.compiled + 'amp-filter.js')
   // .pipe($.streamify($.uglify)) --do not uglify
    .pipe(gulp.dest(paths.dist));
});


gulp.task('copy-stuff', function() {
	gulp.src(paths.images).pipe(gulp.dest(paths.dist+'/img'));
});

gulp.task('less', function() {
	  return gulp.src(paths.stylesheets.entry)
	    .pipe($.plumber())
	    .pipe($.sourcemaps.init())
	      .pipe($.less())
	        .on('error', $.util.log)
	        .on('error', $.util.beep)
	    .pipe($.sourcemaps.write())
	    .pipe($.sourcemaps.init({ loadMaps: true }))
	      .pipe($.autoprefixer({ browsers: 'ie >= 9' }))
	      .pipe($.concat('amp-filter.css'))
	    .pipe($.sourcemaps.write())
	    .pipe($.csscomb())
	    .pipe(gulp.dest(paths.stylesheets.compiled));
	});

gulp.task('build-css', ['less'], function() {
	  return gulp.src(paths.stylesheets.compiled + 'amp-filter.css')
	    .pipe($.csso())
	    .pipe(gulp.dest(paths.dist));
	});


gulp.task('build', function(cb) {
  runSequence(
    'clean','build-js','copy-stuff','build-css',
    cb
  );
});
