var _ = require('underscore');
var Backbone = require('backbone');

// loading hacks
var jQuery = require('jquery');
window.jQuery = window.$ = Backbone.$ = jQuery;
require('jquery-ui/draggable');
require('bootstrap/dist/js/bootstrap');


var FilterView = require('./views/filters-view');

// see README.md for documentation on using widget.


function Widget() {
  this.initialize.apply(this, arguments);
}

_.extend(Widget.prototype, Backbone.Events, {

  initialize: function(options) {
    var self = this;
    options = _.defaults(options, { draggable: true });
    if (_.has(options, 'sync')) {
      Backbone.sync = options.sync;
    }
    this.view = new FilterView(options);

    // loaded deferred to allow for other code to wait for filters to finish loading.
    this.loaded = this.view._loaded;

    // proxy all filter events through here
    this.listenTo(this.view, 'all', function() {
      this.trigger.apply(this, arguments);
    })
  },

  // put the filters into the DOM tree post-initialization
  setElement: function() {
    this.view.setElement(arguments);
  },

  // this will stash current filter state, so it can be restored on cancel.
  showFilters: function() {
    this.view.showFilters();
  },

  // return json blob of serialized filter state.
  serialize: function() {
    return this.view.serialize();
  },

  // restores filter state given a json blob.
  deserialize: function(stateBlob) {
    return this.view.deserialize(stateBlob);
  },

  // reset filters to empty state
  reset: function(options) {
    this.view.resetFilters();
    if (!options || !options.silent) {
      this.view.applyFilters();
    }
  }

});



module.exports = Widget;
