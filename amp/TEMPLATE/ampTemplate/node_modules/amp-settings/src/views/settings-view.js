var fs = require('fs');
var $ = require('jquery');
var _ = require('underscore');
var Backbone = require('backbone');
var Translator = require('amp-translate');
var Template = fs.readFileSync(__dirname + '/../templates/settings-template.html', 'utf8');
var SelectTemplate = fs.readFileSync(__dirname + '/../templates/select-template.html', 'utf8');
var YearRangeTemplate = fs.readFileSync(__dirname + '/../templates/year-range-template.html', 'utf8');
var YearSelectTemplate = fs.readFileSync(__dirname + '/../templates/year-select-template.html', 'utf8');

var Constants = require('../common/constants');
module.exports = Backbone.View.extend({
	template : _.template(Template),
	selectTemplate : _.template(SelectTemplate),
	yearRangeTemplate : _.template(YearRangeTemplate),
	yearSelectTemplate : _.template(YearSelectTemplate),
	events : {
		'click .apply-btn' : 'applySettings',
		'change select' : 'optionChanged',
		'click .close' : 'close'
	},
	appliedSettings : {},
	initialize : function(options) {
		this.settingsDefinitions = options.settingsDefinitions;
		this.isPopup = options.isPopup;
		if (options.translator === undefined) {
			this.createTranslator(true);
		} else {
			this.translator = options.translator;
		}
		_.bindAll(this, "render", "applySettings");
	},
	createTranslator : function(force) {
		var self = this;
		var translateKeys = JSON.parse(fs.readFileSync(__dirname + '/../lib/initial-translation-request.json', 'utf8'));
		if (force === true || self.translator === undefined) {
			self.translator = new Translator({
				defaultKeys : translateKeys
			});
		}
	},
	translate : function(target) {
		var element = this;
		if (target !== undefined) {
			element = target;
		}
		if (element.el !== undefined) {
			this.translator.translateDOM(element.el);
		} else {
			this.translator.translateDOM(element);
		}
	},
	render : function() {
		var self = this;
		self.$el.html(self.template({
			isPopup : this.isPopup
		}));
		this.settingsDefinitions.load().done(function() {
			self.updateUI();
			self.$el.show();
		});
		return this;
	},
	updateUI : function() {
		if (this.isPopup) {
			this.$el.addClass('panel panel-primary amp-settings-dialog');
			this.$('.panel-heading').show();
			this.$('.cancel-settings').show();
		} else {
			this.$('.panel-heading').hide();
			this.$('.cancel-settings').hide();
		}
		this.$('.settings').html('');
		this.appendSetting(Constants.CALENDAR_ID);
		this.appendSetting(Constants.CURRENCY_ID);
		this.appendSetting(Constants.FUNDING_TYPE_ID);
		this.appendYearRangeSetting();
		this.translate(this.$el);
	},
	appendSetting : function(settingID) {
		var setting = this.settingsDefinitions.findWhere({
			id : settingID
		});
		if (setting) {
			if (_.isUndefined(this.appliedSettings[settingID])) {
				this.appliedSettings[settingID] = setting.get('value').defaultId;
			}
			this.$('.settings').append(this.selectTemplate({
				setting : setting.toJSON(),
				appliedSettings : this.appliedSettings
			}));
		}
		if (settingID === Constants.CURRENCY_ID && _.isUndefined(this.allCurrencies)) {
			this.allCurrencies = setting.get('value').options;
		}
	},
	appendYearRangeSetting : function() {
		var yearRangeSetting = this.settingsDefinitions.findWhere({
			id : Constants.YEAR_RANGE_ID
		});
		if (yearRangeSetting) {
			this.appliedSettings[Constants.YEAR_RANGE_ID] = this.appliedSettings[Constants.YEAR_RANGE_ID] || {};
			this.$('.settings').append(this.yearRangeTemplate(yearRangeSetting.toJSON()));
			this.appendYearSelect(yearRangeSetting, Constants.YEAR_FROM_ID);
			this.appendYearSelect(yearRangeSetting, Constants.YEAR_TO_ID);
		}
	},
	appendYearSelect : function(yearRangeSetting, settingID) {
		var setting = _.findWhere(yearRangeSetting.get('value'), {
			id : settingID
		});
		if (_.isUndefined(this.appliedSettings[Constants.YEAR_RANGE_ID][settingID])) {
			this.appliedSettings[Constants.YEAR_RANGE_ID][settingID] = setting.value.defaultId;
		}
		this.$('.year-range').append(this.yearSelectTemplate({
			setting : setting,
			appliedSettings : this.appliedSettings
		}));
	},
	getCurrenciesByCalendar : function(calendarId) {
		var calendarCurrencies = this.settingsDefinitions.findWhere({
			id : Constants.CALENDAR_CURRENCIES_ID
		});
		var currencies = [];
		if (calendarCurrencies) {
			currencies = _.uniq(_.findWhere(calendarCurrencies.get('value').options, {
				id : calendarId
			}).value.split(","));
		}
		return currencies;
	},
	optionChanged : function(evt) {
		var self = this;
		var settingID = $(evt.currentTarget).attr('id');
		var selectedID = $(evt.currentTarget).val();
		this.updateSelected(settingID, selectedID);
		if (settingID === Constants.CALENDAR_ID) {
			this.updateCurrencyList(selectedID);
			this.updateUI();
		}
	},
	updateCurrencyList : function(selectedCalendarId) {
		var self = this;
		// update currency select when calendar changes
		var availableCurrenciesForCalendar = self.getCurrenciesByCalendar(selectedCalendarId);		
		self.settingsDefinitions.get(Constants.CURRENCY_ID).get('value').options = [];
		$.each(availableCurrenciesForCalendar, function(index, object) {
			self.settingsDefinitions.get(Constants.CURRENCY_ID).get('value').options.push(_.find(self.allCurrencies, function(item) {
				return item.id === object
			}));
		});
		// select first
		this.updateSelected(Constants.CURRENCY_ID, availableCurrenciesForCalendar[0]);
	},
	updateSelected : function(settingID, selectedID) {
		var setting = this.settingsDefinitions.get(settingID);
		if (settingID === Constants.YEAR_FROM_ID || settingID === Constants.YEAR_TO_ID) {
			this.appliedSettings[Constants.YEAR_RANGE_ID][settingID] = selectedID;
		} else {
			this.appliedSettings[settingID] = selectedID;
		}
	},
	getCurrent : function() {
		return this.appliedSettings;
	},
	restoreFromSaved : function(state) {
		var self = this;
		_.each(state, function(v, k) {
			self.appliedSettings[k] = v;
		});
		this.updateUI();
	},
	applySettings : function() {
		this.trigger('apply-settings', this.appliedSettings);
	},
	close : function() {
		this.trigger('close');
	}

});