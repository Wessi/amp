var fs = require('fs');
var $ = require('jquery');
var _ = require('underscore');
var Backbone = require('backbone');
var Translator = require('amp-translate');
var Template = fs.readFileSync(__dirname + '/../templates/settings-template.html', 'utf8');
var SettingsCollection = require('../collections/settings-collection');
var Constants = require('../utils/constants');
module.exports = Backbone.View.extend({
	template: _.template(Template), 
	events : {		
		'click apply-buton': 'applySettings'
	},
	initialize : function(options) {		
		var self = this;
		_.bindAll(this, "render", "applySettings");
		if(options.translator === undefined) {
			this.createTranslator(true);
		} else {
			this.translator = options.translator;
		}	
	},
	loadData: function(){
		var deffereds = [];
		this.settingsData =  new SettingsCollection();
		deffereds.push(this.settingsData.fetch());
		return $.when.apply($, deffereds);		
	},
	createTranslator: function(force) {
		var self = this;
		var translateKeys = JSON.parse(fs.readFileSync(__dirname + '/../lib/initial-translation-request.json', 'utf8'));
		if (force === true || self.translator === undefined) {	      
			self.translator = new Translator({defaultKeys: translateKeys});
		}
	},
	translate: function(target) {
		var element = this;
		if (target !== undefined) {
			element = target;
		}
		if (element.el !== undefined) {
			this.translator.translateDOM(element.el);
		} else {
			this.translator.translateDOM(element);
		}
	},
	render: function() {	 
		var self = this;    
		this.loadData().then(function() {	
			self.$el.addClass('panel panel-primary');
			var currencySetting = self.settingsData.findWhere({id:Constants.SETTINGS.CURRENCY_ID});
			var calendarSetting = self.settingsData.findWhere({id:Constants.SETTINGS.CALENDAR_ID});
			var fundingTypeSetting = self.settingsData.findWhere({id:Constants.SETTINGS.FUNDING_TYPE_ID});
			var yearRangeSetting = self.settingsData.findWhere({id:Constants.SETTINGS.YEAR_RANGE_ID});
			self.$el.html(self.template({currencySetting: currencySetting, calendarSetting: calendarSetting, fundingTypeSetting: fundingTypeSetting, yearRangeSetting: yearRangeSetting}));
			self.translate(self.$el);
			self.$el.show();
		});    
		return this;
	},  
	applySettings: function() {		
	}

});