var fs = require('fs');
var $ = require('jquery');
var _ = require('underscore');
var Backbone = require('backbone');
var Translator = require('amp-translate');
var Template = fs.readFileSync(__dirname + '/../templates/settings-template.html', 'utf8');
var SelectTemplate = fs.readFileSync(__dirname + '/../templates/select-template.html', 'utf8');
var YearRangeTemplate = fs.readFileSync(__dirname + '/../templates/year-range-template.html', 'utf8');

var Constants = require('../common/constants');
module.exports = Backbone.View.extend({
	template : _.template(Template),
	selectTemplate : _.template(SelectTemplate),
	yearRangeTemplate : _.template(YearRangeTemplate),
	events : {
		'click .apply-settings' : 'applySettings',
		'change select' : 'optionChanged',
		'click .close' : 'close'
	},
	selectedSettings : {},
	initialize : function(options) {
		this.settingsDefinitions = options.settingsDefinitions;
		this.isPopup = options.isPopup;
		if (options.translator === undefined) {
			this.createTranslator(true);
		} else {
			this.translator = options.translator;
		}
		_.bindAll(this, "render", "applySettings");
	},
	createTranslator : function(force) {
		var self = this;
		var translateKeys = JSON.parse(fs.readFileSync(__dirname + '/../lib/initial-translation-request.json', 'utf8'));
		if (force === true || self.translator === undefined) {
			self.translator = new Translator({
				defaultKeys : translateKeys
			});
		}
	},
	translate : function(target) {
		var element = this;
		if (target !== undefined) {
			element = target;
		}
		if (element.el !== undefined) {
			this.translator.translateDOM(element.el);
		} else {
			this.translator.translateDOM(element);
		}
	},
	render : function() {
		var self = this;
		self.$el.html(self.template({}));
		this.settingsDefinitions.load().done(function() {
			self.updateUI();
			self.$el.show();
		});
		return this;
	},
	updateUI : function() {
		if (this.isPopup) {
			this.$el.addClass('panel panel-primary amp-settings-dialog');
			this.$('.panel-heading').show();
		} else {
			this.$('.panel-heading').hide();
		}

		this.$('.settings').html('');
		var calendarSetting = this.settingsDefinitions.findWhere({
			id : Constants.CALENDAR_ID
		});
		this.appendSelectSetting(calendarSetting);

		var currencySetting = this.settingsDefinitions.findWhere({
			id : Constants.CURRENCY_ID
		});
		this.allCurrencies = currencySetting.get('options');
		this.appendSelectSetting(currencySetting);

		var fundingTypeSetting = this.settingsDefinitions.findWhere({
			id : Constants.FUNDING_TYPE_ID
		});
		this.appendSelectSetting(fundingTypeSetting);

		var yearRangeSetting = this.settingsDefinitions.findWhere({
			id : Constants.YEAR_RANGE_ID
		});
		if (yearRangeSetting) {
			self.$('.settings').append(this.yearRangeTemplate(setting.toJSON()));
		}
		this.translate(this.$el);
	},
	appendSelectSetting : function(setting) {
		if (setting) {
			this.$('.settings').append(this.selectTemplate(setting.toJSON()));
		}
	},
	getCurrenciesByCalendar : function(calendarId) {
		var calendarCurrencies = this.settingsDefinitions.findWhere({
			id : Constants.CALENDAR_CURRENCIES
		});
		var currencies = [];
		if (calendarCurrencies) {
			currencies = _.uniq(_.findWhere(calendarCurrencies.get('options'), {
				id : calendarId
			}).value.split(","));
		}
		return currencies;
	},
	optionChanged : function(evt) {
		var self = this;
		var id = $(evt.currentTarget).attr('id');
		if (id === Constants.CALENDAR_ID) {
			// update currency select when calendar changes
			var availableCurrenciesForCalendar = self.getCurrenciesByCalendar($(evt.currentTarget).val());
			self.settingsDefinitions.get(Constants.CURRENCY_ID).set('options', [], {
				silent : true
			});
			this.$('#' + Constants.CURRENCY_ID).empty();
			$.each(availableCurrenciesForCalendar, function(index, object) {
				self.$('#' + Constants.CURRENCY_ID).append($("<option></option>").attr("value", object).text(_.find(self.allCurrencies, function(item) {
					return item.id === object
				}).name));
				self.settingsDefinitions.get(Constants.CURRENCY_ID).get('options').push(_.find(self.allCurrencies, function(item) {
					return item.id === object
				}));
			});

			// select first currency on list
			this.$('#' + Constants.CURRENCY_ID).val(availableCurrenciesForCalendar[0]);
			this.updateSelected(Constants.CURRENCY_ID, availableCurrenciesForCalendar[0]);
		}
		var settingID = $(evt.currentTarget).attr('id');
		var selectedID = $(evt.currentTarget).val();
		this.updateSelected(settingID, selectedID);

	},
	updateSelected : function(settingID, selectedID) {
		var setting = this.settingsDefinitions.get(settingID);
		if (setting) {
			this.selectedSettings[settingID] = selectedID;
		}
	},
	applySettings : function() {
		var self = this;
		_.each(_.keys(this.selectedSettings), function(settingID) {
			var setting = self.settingsDefinitions.get(settingID);
			if (setting) {
				setting.set('selected', self.selectedSettings[settingID], {
					silent : false
				});
			}
		});
		this.selectedSettings = {};
		this.trigger('apply-settings', this.settingsDefinitions.toAPI());
	},
	close : function() {
		this.trigger('close');
	}

});