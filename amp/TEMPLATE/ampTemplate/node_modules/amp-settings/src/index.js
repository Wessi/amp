var fs = require('fs');
var _ = require('underscore');
var Backbone = require('backbone');
//loading hacks
var jQuery = require('jquery');
require('jquery-ui/draggable');
var Config = require('./common/config');

//loading jquery is colliding in GIS module, so we only load it if
//it is not loaded or if there is a jquery loaded but version is older than 2.x.x
if (window.$ == undefined || $.fn.jquery.split(' ')[0].split('.')[0] < 2) {
	window.jQuery = window.$ = Backbone.$ = jQuery;
}

var bootstrap_enabled = (typeof $().modal == 'function');
if (bootstrap_enabled) {
	require('bootstrap/dist/js/bootstrap');
}
var SettingsDefinitionsCollection = require('./collections/settings-definitions-collection');
var SettingsView = require('./views/settings-view');
var GlobalSettings = require('./models/global-settings');

function Widget() {
	this.initialize.apply(this, arguments);
}

_.extend(Widget.prototype, Backbone.Events, {
	initialize : function(options) {
		options = _.defaults(options, {
			draggable : true
		});
		options = _.defaults(options, {
			definitionUrl : Config.DEFINITION_URL
		});
		options = _.defaults(options, {
			isPopup : Config.IS_POPUP
		});
		
		this.settingsDefinitions = new SettingsDefinitionsCollection([], options);
		options.settingsDefinitions = this.settingsDefinitions;
		this.view = new SettingsView(options);
		this.listenTo(this.view, 'all', function() {
			this.trigger.apply(this, arguments);
		});
		
		this.globalSettings = new GlobalSettings();
				
	},
	loadData: function(){
		if(!this._loadDataPromise){
			this.deferred = [];
		    this.deferred.push(this.settingsDefinitions.load());
		    this.deferred.push(this.globalSettings.fetch());
		    this._loadDataPromise = $.when.apply($, this.deferred).then(function () {});
		    return this._loadDataPromise;
		}else{
			return this._loadDataPromise;
		}		
	},
	show : function() {
		this.view.render();
	},
	toAPIFormat : function() {
		return this.view.getCurrent();
	},
	restoreFromSaved : function(state) {
		return this.view.restoreFromSaved(state);
	},
	setElement : function(arguments) {
		this.view.setElement(arguments);
	}
});
module.exports = Widget;
window.AMPSettings = Widget;