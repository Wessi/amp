var fs = require('fs');
var _ = require('underscore');
var Backbone = require('backbone');
//loading hacks
var jQuery = require('jquery');
require('jquery-ui/draggable');
var Config = require('./common/config');
var Utils = require('./common/utils');

//loading jquery is colliding in GIS module, so we only load it if
//it is not loaded or if there is a jquery loaded but version is older than 2.x.x
if (window.$ == undefined || $.fn.jquery.split(' ')[0].split('.')[0] < 2) {
  window.jQuery = window.$ = Backbone.$ = jQuery;
}

var bootstrap_enabled = (typeof $().modal == 'function');
if (bootstrap_enabled) {
  require('bootstrap/dist/js/bootstrap');
}
var SettingsCollection = require('./collections/settings-collection');
var SettingsView = require('./views/settings-view');


function Widget() {
	  this.initialize.apply(this, arguments);
}

_.extend(Widget.prototype, Backbone.Events, {

	  initialize: function(options) {
		  options = _.defaults(options, { draggable: true });
		  
		  if(Utils.isNullOrUndefined(options.definitionUrl)){
			  options.definitionUrl = Config.DEFAULT.DEFINITION_URL;
		  }	
		  
		  if(Utils.isNullOrUndefined(options.isPopup)){
			  options.isPopup = Config.DEFAULT.IS_POPUP;
		  }	
		  
		  this.settingsData = new SettingsCollection([], options);
		  options.settingsData = this.settingsData;		  
		  this.view = new SettingsView(options);		  
		  this.listenTo(this.view, 'all', function() {
		      this.trigger.apply(this, arguments);
		    });
	  },
	  show: function() {
		 this.view.render();
	  },
	  setElement: function(arguments) {
		  this.view.setElement(arguments);
	  },

});
module.exports = Widget;
window.AMPSettings = Widget;