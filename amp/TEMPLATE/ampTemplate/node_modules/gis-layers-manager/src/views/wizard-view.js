var fs = require('fs');
var $ = require('jquery');
var _ = require('underscore');
var Backbone = require('backbone');
var ColorCollection = require('../collections/colors-collection.js');
var ADMCollection = require('../collections/adm-levels-collection.js');
var AccessTypesCollection = require('../collections/access-types-collection.js');
var Steps = require('../utils/steps.js');
var Validator = require('../utils/validator.js');
var Events = require('../utils/events.js');
var Template = fs.readFileSync(__dirname + '/../templates/wizard-template.html', 'utf8');
var IndicatorLayer = require('../models/indicator-layer.js');
var UserModel = require('../models/user-model.js');
module.exports = Backbone.View.extend({
  id: 'layer-manager-wizard',  
  events: {	
	  'click .next-button ': 'next',
	  'click .previous-button': 'previous',	  
	  'click .btn-back': 'backToList',
	  'click .export-button': 'exportFile',	 
	  'click .import-button': 'importFile',		  
	  'change .form-control':  'onInputChange',
	  'click .color-radio': 'selectColors',
	  'click .btn-submit' : 'submitLayer',
	  'change .indicator-file': 'onImportFileChange'
  },  
  template: _.template(Template),  
  initialize:function(options) {	
	  _.bindAll(this, 'render', 'next','previous','onInputChange','loadCollections','submitLayer','backToList','exportFile','onImportFileChange');
	  this.EventsBus = options.EventsBus;
	  this.translate = options.translate;
	  this.translator = options.translator;
	  var self = this;	   
	  this.loadCollections().then(function() {	
		  if(!_.isUndefined(options.model)){
			  self.model = options.model;			  
			  self.render();
		  }		  
	  });
	 
  },  
  render: function() {	 
	    var self = this;
	    if(_.isUndefined(this.model.get('id'))){
	    	//if admin - default access type is Standard, Private    	
	    	var accessTypeName = this.user.get('administratorMode') ? 'standard' : 'private';
	    	var acessType = this.accessTypes.findWhere({value: accessTypeName});	    	
	    	if(acessType){
	    		this.model.set('accessTypeId',acessType.get('id'))	
	    	}	    	
	    }	    
	    this.$el.html(this.template(this.model.toJSON()));
	    this.renderColorSelector();
	    this.renderADMDropdown();
	    this.renderAccessTypeDropdown();
	    this.translate(this.$el);
	    this.$el.find('[data-toggle="tooltip"]').tooltip();
	    this.$el.show();
	    return this;
  },  
  renderColorSelector: function(){
	  var self = this;
	  self.colorsMap = {};
	  this.colors.each(function(colorModel){	    	
	    	_.each(colorModel.attributes,function(colorArray, key){
	    		self.colorsMap[key] = colorArray;
	    		 var tr = $('<tr></tr>');
	    		 var colortd = $('<td></td>');
	    		 var radiotd = $('<td></td>');
	    		 var colorStrip = $('<div class="dd-option-description dd-desc"></div>');
	    		_.each(colorArray,function(hexColor){
	    			var colorSpan = $('<span></span>');
	    			colorSpan.html('&nbsp;&nbsp;&nbsp;');
	    			colorSpan.css({'background-color':hexColor});
	    			colorStrip.append(colorSpan);    			
	    		});
	    		var radio = $('<input class="color-radio"/>');
	    		radio.attr('type','radio')
	    		radio.attr('value',key);
	    		radio.attr('name','color-input');
	    		if(key == self.model.get('colorRampId')){
	    			radio.prop('checked', true);
	    		}    		
	    		tr.append(radiotd.append(radio));
	    		tr.append(colortd.append(colorStrip));
	    		self.$el.find(".color-selector").append(tr);
	    	});
	    });  
  },
  renderADMDropdown: function(){
	  var self = this;
	  this.admLevels.each(function(admLevel){
		   var selected = (admLevel.get('id') === self.model.get('admLevelId'));	   
	       self.$el.find(".adm-level").append($("<option></option>").attr("value",admLevel.get('id')).prop('selected', selected).text(admLevel.get('label')));	    	
	    });  
  },
  renderAccessTypeDropdown: function(){
	  var self = this;	  
	  this.accessTypes.each(function(accesType){
		    var selected = (accesType.get('id') === self.model.get('accessTypeId'));		    
	    	self.$el.find(".access-type").append($("<option></option>").attr("value",accesType.get('id')).prop('selected', selected).text(accesType.get('label')));	    	
	    });
  },
  displayErrors: function(errors){	  
	  var messageBox = this.$el.find('.message-box');
	  messageBox.removeClass('alert-success');
	  messageBox.addClass('alert-danger');
	  messageBox.empty();	  
	_.each(errors, function(error){
		var span = $('<span></span>');		
		span.html(error);
		messageBox.append($('<span class="glyphicon glyphicon-exclamation-sign"></span>'));
		messageBox.append(span)
		messageBox.append($('<br>'));
	});  
	messageBox.show().delay(5000).fadeOut();
  },
  displaySuccessMessage: function(message){
	  var messageBox = this.$el.find('.message-box');	  
	  messageBox.removeClass('alert-danger');
	  messageBox.addClass('alert-success');
	  messageBox.empty();
	  var span = $('<span></span>');		
	  span.html(message);
	  messageBox.append(span)
	  messageBox.append($('<br>'));	 	
	  messageBox.show().delay(5000).fadeOut();  
  },
  next: function(e){
	  var target = e.target;
	  var current = $(target).attr("data-current");
	  var errors = Validator[current](this.model);  
	  if(errors.length === 0){
		  this.$el.find('.nav-pills a[href="#' + Steps[current].next + '"]').tab('show'); 
	  }else{
		  this.displayErrors(errors);
	  } 	          	  
  },
  previous: function(e){
	  var target = e.target;
	  var current = $(target).attr("data-current");	  	 
	  if(Steps[current].previous != current){		    
		  this.$el.find('.nav-pills a[href="#' + Steps[current].previous + '"]').tab('show');
	  }	 
  },  
  onInputChange: function(e){
	  var fieldName = $(e.target).attr('id')	  
	  this.model.set(fieldName, $(e.target).val());	  
  },
  onImportFileChange : function(e) {	 
	this.$el.find('.selected-file').html($(e.target)[0].files[0].name);	
  }, 
  loadCollections: function(){
	  var deffereds = [];
	  this.colors = new ColorCollection();
	  this.admLevels = new ADMCollection();
	  this.accessTypes = new AccessTypesCollection(); 
	  this.user = new UserModel(); 
	  deffereds.push(this.colors.fetch());
	  deffereds.push(this.admLevels.fetch());
	  deffereds.push(this.accessTypes.fetch());
	  deffereds.push(this.user.fetch());
	  return $.when.apply($, deffereds);	  
  },  
  selectColors : function(e){
	  var colorRampId = parseInt($(e.target).val());
	  this.model.set('colorRampId', colorRampId);
	  this.model.set('colorRamp', this.colorsMap[colorRampId]);	  
  },
  submitLayer: function(){
	  var self = this;
	  this.model.save(null, {
		  type: 'POST',
		  url:'/rest/indicator/indicator-layer',
		    success: function (model, response) {
		    	self.EventsBus.trigger(Events.WIZARD_CLOSED_EVENT);
		    },
		    error: function (model, response) {		    			        
		    }
		});	  
  },  
  backToList : function(){
	  this.EventsBus.trigger(Events.WIZARD_CLOSED_EVENT);
  },
  exportFile: function(){	  
      var self = this;       
	  this.save().then(function(){
		  window.open('/rest/indicator/indicator-layer/export/' + self.model.get('admLevelId'), '_blank');	
	  });	    
  },
  save: function(){
	  var deffereds = [];
	  deffereds.push(this.model.save(null, {
		    type: 'POST',
		    url:'/rest/indicator/indicator-layer',
		    success: function (model, response) {	  			  	  
		    },
		    error: function (model, response) {		    		        
		    }
		}));
	  return $.when.apply($, deffereds)
  },
  importFile: function(currentStep){
	  var self = this;	  
	  this.save().then(function(){
		  var formData = new FormData();
		  var selectedFile = self.$el.find('.indicator-file')[0].files[0];
		  if(selectedFile){
			  formData.append('file', selectedFile);
			  formData.append('option',parseInt(self.$el.find('.import-option').val()));
		  }else{
			  self.displayErrors(["Please select the file to import"]);  
			  return;
		  }	
		  self.$el.find('.progress-indicator').show();
		  $.ajax({
		         url : '/rest/indicator/indicator-layer/import',
		         type : 'POST',
		         data : formData,
		         processData: false, 
		         contentType: false,
		         success : function(data) {	        	 
		        	 if(data.result === 'IMPORTED'){
		        		 self.displaySuccessMessage('Imported file successfully');		        		 
		        	 }else{
		        		 self.displayErrors(['Error: Could not import file. Please check the file format.']);  
		        	 }		        	 
		        	 self.$el.find('.progress-indicator').hide();
		         },
		         error: function(data){        	 
		        	 self.displayErrors([data.responseText]); 
		        	 self.$el.find('.progress-indicator').hide();
		         }
		  }); 
	  })
	  
  }
  
});