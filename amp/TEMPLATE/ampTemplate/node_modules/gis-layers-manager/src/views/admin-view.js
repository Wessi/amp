var fs = require('fs');
var $ = require('jquery');
var _ = require('underscore');
var Backbone = require('backbone');
var LayerIndicatorCollection = require('../collections/layers-collections');
var AccessTypesCollection = require('../collections/access-types-collection.js');
var Events = require('../utils/events.js');
var UserModel = require('../models/user-model.js');

var Template = fs.readFileSync(__dirname + '/../templates/admin-template.html', 'utf8');
module.exports = Backbone.View.extend({
  id: 'layer-manager-admin',
  events: {
      'click .glyphicon-edit': 'editLayer',
      'click .glyphicon-trash': 'removeLayer',      
      'click .glyphicon-lock': 'makePrivateLayer',
      'click .glyphicon-globe': 'makePublicLayer',
      'click .page-item': 'changePage',
      'click .new-layer-btn': 'createLayer'
  },
  template: _.template(Template),  
  initialize:function(options) {
      this.layers = new LayerIndicatorCollection();
      this.accessTypes = new AccessTypesCollection();
      this.user = new UserModel();
      this.EventsBus = options.EventsBus;
      this.translate = options.translate;
      this.translator = options.translator;
      this.def = [];
      this.def.push(this.accessTypes.fetch());
      this.def.push(this.user.fetch());      
      
  },
  render: function() {
	  var self = this;	  
	  this.def.push(this.layers.fetch());
	  $.when.apply($, this.def).then(function () {		  
		  self.$el.html(self.template({layers: self.layers, page: self.layers.page, user: self.user, accessTypes: self.accessTypes}));
		  self.translate(self.$el);
		  self.$el.show();
	  });     
	  return this;
  },
  editLayer: function(e) {
      var id = $(e.target).data("id");
      var selectedModel = this.layers.findWhere({id: id});
      this.EventsBus.trigger(Events.UPDATE_LAYER_EVENT, selectedModel);
  },
  createLayer: function() {
	  this.EventsBus.trigger(Events.CREATE_LAYER_EVENT);
  },
  removeLayer: function(e) {
	  if(confirm("Are you sure you want to delete")) {
		  var id = $(e.target).data("id");
		  var selectedModel = this.layers.findWhere({id: id});
		  var self = this;
		  selectedModel.deleteLayer({
			  success: function() {
				  self.render();
			  }            
		  });
	  }
  },
  changePage: function(e) {
	  var currentPage = $(e.target).data("page");
	  if(currentPage === '+') {
		  currentPage = this.layers.page.get('currentPageNumber') + 1;
	  } else if(currentPage === '-') {
		  currentPage = this.layers.page.get('currentPageNumber') - 1;
	  }

	  if(currentPage >= 0 && currentPage < this.layers.page.get('totalPageCount')) {
		  this.layers.page.set('currentPageNumber', currentPage);	    	  
		  this.render();
	  }
  },
  makePrivateLayer: function(e) {
      this.changeStateLayer(e, 'private'); // make it private
  },
  makePublicLayer: function(e) {
      this.changeStateLayer(e, 'public'); // make it public
  },
  changeStateLayer: function(e, type) {
      var id = $(e.target).data("id");
      var selectedModel = this.layers.findWhere({id: id});
      var accessType = this.accessTypes.findWhere({value: type});
      selectedModel.set('accessTypeId', accessType.id);
      var self = this;
      selectedModel.update(function() {
          self.render();
      });
  }
  
});