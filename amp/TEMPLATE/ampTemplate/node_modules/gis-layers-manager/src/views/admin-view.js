var fs = require('fs');
var $ = require('jquery');
var _ = require('underscore');
var Backbone = require('backbone');
var LayerIndicatorCollection = require('../collections/layers-collections');
var Events = require('../utils/events.js');

var Template = fs.readFileSync(__dirname + '/../templates/admin-template.html', 'utf8');
module.exports = Backbone.View.extend({
  id: 'layer-manager-admin',
  events: {
      'click .glyphicon-edit': 'editLayer',
      'click .glyphicon-remove': 'removeLayer',
      'click .page-item': 'changePage',
      'click .new-layer-btn': 'createLayer'
  },
  template: _.template(Template),  
  initialize:function(options) {
      this.layers = new LayerIndicatorCollection();
      this.EventsBus = options.EventsBus;
      this.translate = options.translate;
      this.translator = options.translator;
      var self = this;
      
  },
  render: function() {
	  var self = this;
	  this.layers.fetch({
          success: function () {
        	  self.$el.html(self.template({layers: self.layers, page: self.layers.page}));
        	  self.translate(self.$el);
        	  self.$el.show();
          },
          error: function(){
        	  console.log('error loading indicators');
          }
      });      
      return this;
  },
  editLayer: function(e) {
      var id = $(e.target).data("id");
      var selectedModel = this.layers.findWhere({id: id});
      this.EventsBus.trigger(Events.UPDATE_LAYER_EVENT, selectedModel);
  },
  createLayer: function() {
	  this.EventsBus.trigger(Events.CREATE_LAYER_EVENT);
  },
  removeLayer: function(e) {
      if(confirm("Are you sure you want to delete")) {
          var id = $(e.target).data("id");
          var selectedModel = this.layers.findWhere({id: id});
          var self = this;
          selectedModel.delete({
            success: function() {
                self.layers.remove(selectedModel);
                self.render();
            }
          });
      }
  },
  changePage: function(e) {
      var currentPage = $(e.target).data("page");
      if(currentPage === '+') {
          currentPage = this.layers.page.get('currentPageNumber') + 1;
      } else if(currentPage === '-') {
          currentPage = this.layers.page.get('currentPageNumber') - 1;
      }
      if(currentPage >= 0 && currentPage < this.layers.page.get('totalPageCount')) {
          this.layers.page.set('currentPageNumber', currentPage);
          var self = this;
          this.layers.fetch({
              success: function () {
                  self.render();
              },
              error: function(){
                  console.log('error loading indicators');
              }
          });
      }
  }
});