var fs = require('fs');
var $ = require('jquery');
var _ = require('underscore');
var Backbone = require('backbone');
var Translator = require('amp-translate');
var Wizard = require('./wizard-view');
var Admin = require('./admin-view');
var Translator = require('amp-translate');
var IndicatorLayer = require('../models/indicator-layer.js');
var Template = fs.readFileSync(__dirname + '/../templates/main-template.html', 'utf8');
var EventsBus = _({}).extend(Backbone.Events);
var Events = require('../utils/events.js');
module.exports = Backbone.View.extend({
	id: 'layer-manager',
	events: {  
		'click .cancel': 'cancel'
	},
	template: _.template(Template),  
	initialize:function(options) {		
		var self = this;
		this.draggable = options.draggable;
		this.caller = options.caller;
		if(options.translator === undefined) {
			this.createTranslator(true);
		} else {
			this.translator = options.translator;
		}		
		
		EventsBus.on(Events.UPDATE_LAYER_EVENT, function(selected) {
			self.wizard = new Wizard({translate: self.translate,translator: self.translator, model: selected, EventsBus: EventsBus});
			self.$el.find("#layers-wizard").html(self.wizard.render().el);
			self.$el.find("#layers-admin").hide();
			self.$el.find("#layers-wizard").show();
		});
		
		EventsBus.on(Events.CREATE_LAYER_EVENT, function() {
			var model = new IndicatorLayer();
			self.wizard = new Wizard({translate: self.translate,translator: self.translator, model: model, EventsBus: EventsBus});
			self.$el.find("#layers-wizard").html(self.wizard.render().el);
			self.$el.find("#layers-admin").hide();
			self.$el.find("#layers-wizard").show();
		});
		
		EventsBus.on(Events.WIZARD_CLOSED_EVENT, function() {			
			self.$el.find("#layers-wizard").hide();
			self.$el.find("#layers-admin").empty();				
			self.$el.find("#layers-admin").html(self.admin.render().el);
			self.admin.delegateEvents();
			self.$el.find("#layers-admin").show();			
		});
	},  
	render: function() {
		var self = this;
		this.$el.addClass('panel panel-primary');
		if (this.draggable) {
			this.$el.draggable({cursor: 'move', containment: 'window' });
		}
		this.$el.html(this.template({}));
		this.$el.show();	
		this.$el.find("#layers-admin").empty();
		this.admin = new Admin({translate: this.translate,translator: this.translator, EventsBus: EventsBus});
		this.$el.find("#layers-admin").append(this.admin.render().el);
		this.admin.delegateEvents();
		self.translate(this.$el);
		return this;
	},
	createTranslator: function(force) {
		var self = this;
		var translateKeys = JSON.parse(fs.readFileSync(__dirname + '/../lib/initial-translation-request.json', 'utf8'));
		// setup any popovers as needed...
		//self.popovers = self.$('[data-toggle="popover"]');
		//self.popovers.popover();
		if (force === true || self.translator === undefined) {	      
			self.translator = new Translator({defaultKeys: translateKeys});
		}
	},
	translate: function(target) {
		var element = this;
		if (target !== undefined) {
			element = target;
		}
		if (element.el !== undefined) {
			this.translator.translateDOM(element.el);
		} else {
			this.translator.translateDOM(element);
		}
	},
	show: function(){
		this.render();
	},
	cancel: function(){
		this.trigger('cancel');
	}
});
