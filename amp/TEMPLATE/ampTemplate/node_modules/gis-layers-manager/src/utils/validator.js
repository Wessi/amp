var _ = require('underscore');
var Backbone = require('backbone');
var validator = {};
validator.nameindicators = function(model, translator){
	var errorMessages = [];	
	if(_.isUndefined(model.get('name')) || _.isEmpty(model.get('name'))){
		 errorMessages.push(translator.translateSync('amp.gis-layers-manager:validation-NameRequired','Indicator Name is required'));
		return errorMessages;		
	}	
	
	var numberOfEmpty = 0;	
	var langs = _.keys(model.get('name'));
   _.each(langs,function(lang){
	  if( _.isUndefined(model.get('name')[lang]) || _.isEmpty(model.get('name')[lang])){
		   numberOfEmpty++; 
	   }
	});
   if(numberOfEmpty === langs.length){
	   errorMessages.push(translator.translateSync('amp.gis-layers-manager:validation-NameRequired','Indicator Name is required'));
   }
   return errorMessages;
	
};

validator.definemeasurelabels = function(model, translator){
	var errorMessages = [];
	if(_.isUndefined(model.get('unit')) || _.isEmpty(model.get('unit'))){		
		errorMessages.push(translator.translateSync('amp.gis-layers-manager:validation-MeasureLabelRequired','Measure Label is required'));		
	}
	return errorMessages;
};

validator.defineadmlevels = function(model, translator){
	var errorMessages = [];
	if(_.isUndefined(model.get('admLevelId'))){		
		errorMessages.push(translator.translateSync('amp.gis-layers-manager:validation-ADMLevelRequired','ADM Level is required'));
	}
	return errorMessages;
};

validator.exportfile = function(model, translator){
	var errorMessages = [];
	return errorMessages;
};

validator.reimportfile = function(model,translator){
	var errorMessages = [];
	/*if(_.isUndefined(model.get('numberOfImportedRecords')) || model.get('numberOfImportedRecords') === 0){
		errorMessages.push(translator.translateSync('amp.gis-layers-manager:validation-IndicatorDataRequired','Indicator data required. Please import indicator data before proceeding to the next step'));
	}*/	
	return errorMessages;
};

validator.addnotes = function(model, translator){
	var errorMessages = [];
	return errorMessages;
};

validator.reviewandsave = function(model, translator){
	var errorMessages = [];
	return errorMessages;
};

validator.definecolorscheme = function(model, translator){
	var errorMessages = [];
	if(_.isUndefined(model.get('numberOfClasses')) || model.get('numberOfClasses') == ''){
		errorMessages.push(translator.translateSync('amp.gis-layers-manager:validation-NumberofClassesRequired','Number of Classes is required'));
	}
	if(!isInt(model.get('numberOfClasses'))){
		errorMessages.push(translator.translateSync('amp.gis-layers-manager:validation-NumberofClassesInvalid','Number of Classes is invalid'));	
	}	
	if(_.isUndefined(model.get('colorRampId'))){
		errorMessages.push(translator.translateSync('amp.gis-layers-manager:validation-ColorRequired','Color is required'));		
	}	
	return errorMessages;
};

function isInt(input) {
	  return !isNaN(input) && 
	         parseInt(Number(input)) == input && 
	         !isNaN(parseInt(input, 10));
}

module.exports = validator;