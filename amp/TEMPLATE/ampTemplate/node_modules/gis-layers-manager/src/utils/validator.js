var _ = require('underscore');
var Backbone = require('backbone');
var validator = {};
validator.nameindicators = function(model){
	var errorMessages = [];
	if(_.isUndefined(model.get('name')) || _.isEmpty(model.get('name'))){
		errorMessages.push('Indicator Name is required');
	}
	if(_.isUndefined(model.get('numberOfClasses')) || model.get('numberOfClasses') == ''){
		errorMessages.push('Number of Classes is required');
	}
	if(!isInt(model.get('numberOfClasses'))){
		errorMessages.push('Number of Classes is invalid');
	}	
	return errorMessages;
	
};

validator.definemeasurelabels = function(model){
	var errorMessages = [];
	if(_.isUndefined(model.get('unit')) || _.isEmpty(model.get('unit'))){
		errorMessages.push('Measure Label is required');
	}
	return errorMessages;
};

validator.defineadmlevels = function(model){
	var errorMessages = [];
	if(_.isUndefined(model.get('admLevelId'))){
		errorMessages.push('ADM Level is required');
	}
	return errorMessages;
};

validator.exportfile = function(model){
	var errorMessages = [];
	return errorMessages;
};

validator.reimportfile = function(model){
	var errorMessages = [];
	return errorMessages;
};

validator.addnotes = function(model){
	var errorMessages = [];
	return errorMessages;
};

validator.reviewandsave = function(model){
	var errorMessages = [];
	return errorMessages;
};

validator.definecolorscheme = function(model){
	var errorMessages = [];
	return errorMessages;
};

function isInt(input) {
	  return !isNaN(input) && 
	         parseInt(Number(input)) == input && 
	         !isNaN(parseInt(input, 10));
}

module.exports = validator;