<?php
function hs_select_secondarysectors_hierarchical_select_params() {
  $params = array(
    'id',
  	'separator'
  );
  return $params;
}

function hs_select_secondarysectors_hierarchical_select_root_level($params) {
  $hierarchy = hs_select_secondarysectors_build_tree($params['pid']);
  $children = $hierarchy['root']['children'];
  $level = array();
  foreach ($children as $key => $value) {
    $level[$key] = $hierarchy[$key]['label'];
  }

  return $level; 
}

function hs_select_secondarysectors_hierarchical_select_lineage($item, $params) {
	 $parts = explode($params['separator'], $item);
	 $lineage = array();
  for ($i = 0; $i < count($parts); $i++) {
    $lineage[$i] = implode($params['separator'], array_slice($parts, 0, $i + 1));
  }
	return $lineage;
}

/**
 * Implementation of hook_hierarchical_select_children().
 */
function hs_select_secondarysectors_hierarchical_select_children($parent, $params) {
  $hierarchy = hs_select_secondarysectors_load_tree($parent);
  return $hierarchy[$parent];
  $hierarchy = hs_select_secondarysectors_build_tree($parent);
  
  $items = $hierarchy['root'][$parent]['children'];
  
  return $items;
}

/**
 * Implementation of hook_hierarchical_select_valid_item().
 */
function hs_select_secondarysectors_hierarchical_select_valid_item($item, $params) {
	
	return (is_numeric($item) && $item > 0);
	
  $hierarchy = hs_select_secondarysectors_load_tree($item);
  /* check is it in root */
  if(array_key_exists($item, $hierarchy[0])) {
  		return $hierarchy[0][$item];
  }
  
  if(array_key_exists($item, $hierarchy))
  	return $hierarchy[$item];
  return -1;
}


/**
 * Implementation of hook_hierarchical_select_item_get_label().
 */
function hs_select_secondarysectors_hierarchical_select_item_get_label($item, $params) {
  $hierarchy = hs_select_secondarysectors_load_tree($params['pid']);
  
  return $hierarchy[$item]['label'];
}

function hs_select_secondarysectors_get_items($parent = 0) {
	db_set_active("amp_projects");
	$items = array();
	
	global $language;
    $translate_field = "translate_field('org.digijava.module.aim.dbentity.AmpSector', 'name', sector.amp_sector_id, 'amp_sector', 'name', 'amp_sector_id', '" . $language->language . "')"; 
	
	$query = db_select('amp_sector', 'sector')->fields('sector', array('amp_sector_id'));
	$query->addExpression($translate_field, 'name');
	$query->condition('sector.parent_sector_id', $parent, '=');
	
	$or_statement = db_or()->condition('sector.deleted', 'true', '<>')->condition('sector.deleted', NULL, 'is');
    $query->condition($or_statement);
	
	$result = $query->execute();
	
 	foreach ($result as $record) {
      $items[$record->amp_sector_id] = check_plain($record->name);
    }
	db_set_active();
	
	return $items;
}

function hs_select_secondarysectors_load_tree($parent = 0) {
	db_set_active("amp_projects");
	$items = array();
	
	if (!is_numeric($parent)) {
		return $items;
	}
	
	if($parent == 0) {
		$op = 'IS NULL';
	} else {
		$op = '=';
	}
	
	global $language;
    $translate_field = "translate_field('org.digijava.module.aim.dbentity.AmpSector', 'name', sector.amp_sector_id, 'amp_sector', 'name', 'amp_sector_id', '" . $language->language . "')"; 
	
	$query = db_select('amp_sector', 'sector')->fields('sector', array('amp_sector_id'));
	$query->addExpression($translate_field, 'name');
	$query->distinct();
	$query->condition('sector.parent_sector_id', $parent, $op);
	
	$or_statement = db_or()->condition('sector.deleted', 'true', '<>')->condition('sector.deleted', NULL, 'is');
    $query->condition($or_statement);

	$query->addJoin('INNER', 'amp_activity_sector', 'acts' , 'acts.amp_sector_id=sector.amp_sector_id');
	$query->condition('acts.classification_config_id', 2, '=');
	$query->orderBy($translate_field, 'ASC');
	
	$result = $query->execute();
	/*if( count($result) == 0)
		return array();
	*/
	if($parent == NULL)
		$parent = 0;
	
	foreach ($result as $record) {
      $items[$parent][$record->amp_sector_id] = $record->name;
      $sub_items = hs_select_secondarysectors_load_tree($record->amp_sector_id);
      if(!empty($sub_items)) {
      	$items +=  $sub_items;
      }
    }
    
	db_set_active();
	return $items;
}

function hs_select_secondarysectors_build_tree($parent, $heirarchy = array()) {
	$original_tree =  hs_select_secondarysectors_load_tree($parent);
	$tree = array();

	foreach ($original_tree[$parent] as $key => $value) {
		$tree['root']['children'][$key] = $key;
		$tree[$key]['label'] = $value;
		if(!empty($original_tree[$key])) {
			foreach ($original_tree[$key] as $child_key => $child_value) {
				$tree[$key]['children'][$child_key] = $child_key;
				$tree[$child_key]['label'] = $child_value;
			}
		}
	}
	return $tree;
}
/**
 * Implementation of hook_hierarchical_select_implementation_info().
 */
function hs_select_secondarysectors_hierarchical_select_implementation_info() {
  return array(
    'hierarchy type' => t('Custom'),
    'entity type'    => t('N/A'),
  );
}

function hs_select_secondarysectors_get_item_name($id) {
	db_set_active("amp_projects");
	
	global $language;
    $translate_field = "translate_field('org.digijava.module.aim.dbentity.AmpSector', 'name', sector.amp_sector_id, 'amp_sector', 'name', 'amp_sector_id', '" . $language->language . "')"; 
	
	$query = db_select('amp_sector', 'sector')->fields('sector', array('amp_sector_id'));
	$query->addExpression($translate_field, 'name');
	$query->condition('sector.amp_sector_id', $id, '=');
	
	$result = $query->execute();
	$item = array();
	foreach ($result as $record) {
		$item[] = array('id' => $record->amp_sector_id, 'name' => check_plain($record->name));
	}

	
	db_set_active();
	return $item;
}