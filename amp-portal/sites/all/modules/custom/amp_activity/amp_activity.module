<?php

/**
 * @file
 * Exposes cached_amp_activity table to Drupal.
 */

/**
 * The DB key for the AMP database.
 */
define('AMP_DATABASE', 'amp_projects');

/**
 * Define some of the AMP trasaction type constants.
 */
define('AMP_TRANSACTION_TYPE_COMMITMENT', 0); // Commitment.
define('AMP_TRANSACTION_TYPE_DISBURSEMENT', 1); // Disbursement.
define('AMP_TRANSACTION_TYPE_EXPENDITURE', 2); // Expenditure.

/**
 * Define some of the AMP adjustment type constants.
 */
define('AMP_ADJUSTMENT_TYPE_ACTUAL', 'Actual');
define('AMP_ADJUSTMENT_TYPE_PLANNED', 'Planned');

/**
 * Implements hook_views_api().
 */
function amp_activity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'amp_activity') . '/views',
  );
}

/**
 * Test the AMP DB connection and check if 'cached_amp_activity' table exists.
 */
function amp_activity_check_db() {
  $table_exists = &drupal_static(__FUNCTION__);
  if (isset($table_exists) && !empty($table_exists)) {
    return TRUE;
  }

  db_set_active(AMP_DATABASE);

  $table_exists = db_select('pg_class', 'pg_class')
    ->condition('pg_class.relname', 'cached_amp_activity', "=")
    ->fields('pg_class', array('relname'))
    ->execute()
    ->fetchField();

  db_set_active();

  if (!empty($table_exists)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Get AMP base curency code from cache.
 */
function amp_activity_get_base_currency() {
  $cache_id = __FUNCTION__;
  if ($cache = cache_get($cache_id)) {
    return $cache->data;
  }

  db_set_active(AMP_DATABASE);

  $currency_code = db_select('amp_global_settings', 'settings')
    ->condition('settings.settingsname', 'Base Currency', "=")
    ->fields('settings', array('settingsvalue'))
    ->execute()
    ->fetchField();

  db_set_active();

  // Store the curency code in cache for one week.
  $timestamp = REQUEST_TIME + (60 * 60 * 24 * 7);
  cache_set($cache_id, $currency_code, 'cache', $timestamp);

  return $currency_code;
}

/**
 * Returns an array of 'Activity Budget' options.
 */
function _amp_activity_get_onoff_budget_ids() {
  $options = &drupal_static(__FUNCTION__);
  if (isset($options)) {
    return $options;
  }

  db_set_active(AMP_DATABASE);

  // Get the amp_category_class_id.
  $subquery = db_select('amp_category_class')
    ->fields('amp_category_class', array('id'))
    ->condition('amp_category_class.keyname', 'activity_budget', '=');

  // Get category values for 'Activity Budget'.
  $query = db_select('amp_category_value')
    ->distinct()
    ->fields('amp_category_value', array('id', 'category_value'))
    ->orderBy('amp_category_value.index_column')
    ->condition('amp_category_value.amp_category_class_id', $subquery, 'IN');

  $result = $query->execute();
  db_set_active();

  foreach ($result as $record) {
    switch ($record->category_value) {
      case 'Off Budget':
        $options['off'] = $record->id;
        break;
      case 'On Budget':
        $options['on'] = $record->id;
        break;
    }
  }

  return $options;
}

/**
 * Returns a 'date_year_range' string for the date_popup widget.
 */
function _amp_activity_activities_period_range_limits() {
  $date_year_range = &drupal_static(__FUNCTION__);

  if (isset($date_year_range)) {
    return $date_year_range;
  }

  $this_year = date('Y');

  // By default display a decent amount of years.
  $default = '-30:+30';

  db_set_active('amp_projects');

  try {
    // Get the started date for the oldest activity.
    $query = db_select('cached_amp_activity', 'activity')
      ->fields('activity', array('actual_start_date'))
      ->condition('actual_start_date', '1900-01-01 00:00:00', '!=')
      ->orderby('actual_start_date', 'ASC')
      ->range(0, 1);
    $min_year = $query->execute()->fetchField();

    // Get the completion date for the most recently completed activity.
    $query = db_select('cached_amp_activity', 'activity')
      ->fields('activity', array('actual_completion_date'))
      ->isNotNull('actual_completion_date')
      ->orderby('actual_completion_date', 'DESC')
      ->range(0, 1);
    $max_year = $query->execute()->fetchField();

  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    return $default;
  }

  db_set_active();

  if (empty($min_year) || empty($max_year)) {
    return $default;
  }

  // Extract the year.
  $min_year = date('Y', strtotime($min_year));
  $max_year = date('Y', strtotime($max_year));

  if ($min_year - $this_year < 0) {
    $range_start = (string) ($min_year - $this_year);
  }
  else {
    $range_start = '-0';
  }

  if ($max_year - $this_year > 0) {
    $range_end = '+' . ($max_year - $this_year);
  }
  else {
    $range_end = (string) ($max_year - $this_year);
  }

  // Create a 'date_year_range' string for the date_popup widget.
  $date_year_range = implode(':', array($range_start, $range_end));

  return $date_year_range;
}

/**
 * Returns the children of a sector ID.
 */
function _amp_activity_get_child_sector_ids($parent_sector_id) {
  $child_sector_ids = array();

  db_set_active(AMP_DATABASE);

  $child_ids = db_select('amp_sector', 'amps')
    ->fields('amps', array('amp_sector_id'))
    ->condition('amps.parent_sector_id', $parent_sector_id, '=')->execute()
    ->fetchCol();
  db_set_active();

  foreach ($child_ids as $child_id) {
    $child_sector_ids[] = $child_id;
    $child_sector_ids = array_merge($child_sector_ids, _amp_activity_get_child_sector_ids($child_id));
  }

  return $child_sector_ids;
}

/**
 * Returns the parents of a location ID.
 */
function _amp_activity_get_location_parent_ids($location_id) {
  $include_country_level_projects = &drupal_static('_amp_activity_get_location_parent_ids', FALSE);

  if (empty($include_country_level_projects)) {
    return array();
  }

  db_set_active(AMP_DATABASE);

  $parent_ids = db_select('amp_category_value_location', 'acvl')
    ->fields('acvl', array('parent_location'))
    ->condition('acvl.id', $location_id, '=')
    ->isNotNull('acvl.parent_location')
    ->execute()
    ->fetchCol();
  db_set_active();

  $parent_location_ids = array();
  foreach ($parent_ids as $parent_id) {
    $parent_location_ids[] = $parent_id;

    $parent_location_ids = array_merge($parent_location_ids, _amp_activity_get_location_parent_ids($parent_id));
  }

  return $parent_location_ids;
}

/**
 * Returns the children of a program ID.
 */
function _amp_activity_get_child_program_ids($program_id) {
  $child_program_ids = array();

  db_set_active(AMP_DATABASE);

  $child_ids = db_select('amp_team', 'amp_team')
    ->fields('amp_team', array('amp_team_id'))
    ->condition('amp_team.parent_team_id', $program_id, '=')
    ->execute()
    ->fetchCol();
  db_set_active();

  foreach ($child_ids as $child_id) {
    $child_program_ids[] = $child_id;
    $child_program_ids = array_merge($child_program_ids, _amp_activity_get_child_program_ids($child_id));
  }

  return $child_program_ids;
}

/**
 * Returns a list of activity status options.
 *
 * @TODO: Translate options using the AMP dg_messages translation.
 */
function _amp_activity_get_activity_status_options() {
  $options = &drupal_static(__FUNCTION__);
  if (isset($options)) {
    return $options;
  }

  db_set_active(AMP_DATABASE);

  // Get the amp_category_class_id.
  $subquery = db_select('amp_category_class')
    ->fields('amp_category_class', array('id'))
    ->condition('amp_category_class.keyname', 'activity_status', '=');

  // Get category values for 'Activity Status'.
  $query = db_select('amp_category_value')
    ->distinct()
    ->fields('amp_category_value', array('id', 'category_value'))
    ->orderBy('amp_category_value.index_column')
    ->condition('amp_category_value.amp_category_class_id', $subquery, 'IN');

  $result = $query->execute();

  db_set_active();

  foreach ($result as $record) {
    $options[$record->id] = check_plain($record->category_value);
  }

  return $options;
}

/**
 * Get the ID for an adjustment type.
 */
function _amp_activity_get_adjustment_type_id($adjustment_type) {
  db_set_active(AMP_DATABASE);

  $query = db_select('amp_category_value', 'amp_category_value');

  $join_condition = "amp_category_class.keyname = 'adjustment_type' AND amp_category_class.id = amp_category_value.amp_category_class_id";
  $query->innerJoin('amp_category_class', 'amp_category_class', $join_condition);

  $adjustment_type_id = $query->fields('amp_category_value', array('id'))
    ->condition('amp_category_value.category_value', $adjustment_type, '=')
    ->execute()->fetchField();
  db_set_active();

  return $adjustment_type_id;
}

/**
 * Get the funding details for a list of activities.
 */
function _amp_activity_get_activity_funding_details($transaction_type, $adjustment_type_id, $activities_list, $donors_list = NULL) {
  $amounts_in_base_currency = array();

  if (empty($activities_list)) {
    return $amounts_in_base_currency;
  }

  db_set_active(AMP_DATABASE);

  // Prepare an expresion that can get the transaction_amount amount in the base curency.
  $transaction_amount_expression = 'SUM(amp_funding_detail.transaction_amount / getexchange(currency_code.currency_code, amp_funding_detail.transaction_date))';

  $query = db_select('amp_funding', 'amp_funding');
  $query->leftJoin('amp_funding_detail', 'amp_funding_detail', 'amp_funding_detail.amp_funding_id = amp_funding.amp_funding_id');
  $query->leftJoin('amp_currency', 'currency_code', 'currency_code.amp_currency_id = amp_funding_detail.amp_currency_id');

  $query->fields('amp_funding', array('amp_activity_id'))
    ->addExpression($transaction_amount_expression, 'transaction_amount_in_base_currency');

  $query->condition('amp_funding.amp_activity_id', $activities_list, 'IN')
    ->condition('amp_funding_detail.transaction_type', $transaction_type, "=")
    ->groupBy('amp_funding.amp_activity_id');

  $query->condition('amp_funding_detail.adjustment_type', $adjustment_type_id, '=');

  // Filter funding details by donors.
  if (!empty($donors_list)) {
    if (count($donors_list) == 1) {
      $query->condition('amp_funding.amp_donor_org_id', reset($donors_list), "=");
    }
    else {
      $query->condition('amp_funding.amp_donor_org_id', $donors_list, "IN");
    }
  }

  $result = $query->execute();
  foreach ($result as $record) {
    $amounts_in_base_currency[$record->amp_activity_id] = $record->transaction_amount_in_base_currency;
  }

  db_set_active();

  return $amounts_in_base_currency;
}

/**
 * Translates old pemanent URLs to work with the current filters.
 */
function _amp_activity_get_search_argument_translation($name) {
  $old_args_mapping = array(
    'sector' => 'sectors',

    'primary_sector' => 'sectors_primary',
    'primarysectors' => 'sectors_primary',

    'secondary_sector' => 'sectors_secondary',
    'secondarysectors' => 'sectors_secondary',

    'program' => 'programs',

    'region' => 'locations',

    'donor' => 'organisations_dn',
    'donors' => 'organisations_dn',

    'agencies' => 'organisations_ba',
    'agency' => 'organisations_ba',

    'keyword' => 'keywords',
  );

  foreach ($old_args_mapping as $old_key => $new_key) {
    if ($new_key != $name) {
      continue;
    }

    if (isset($_GET[$new_key])) {
      return $new_key;
    }
  }

  return $name;
}
