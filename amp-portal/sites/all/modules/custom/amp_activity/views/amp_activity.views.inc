<?php
/**
 * @file
 * Provide views data and handlers for amp_activity.
 */

/**
 * Implements hook_views_data_alter().
 */
function amp_activity_views_data_alter(&$data) {
  /**
   * TABLE DEFINITION: cached_amp_activity.
   */
  $data['cached_amp_activity']['table']['group'] = t('Activity');
  $data['cached_amp_activity']['table']['base'] = array(
    'field' => 'amp_activity_id',
    'title' => t('AMP Activities'),
    'help' => t('Contains information related to Cached AMP Activities (projects).'),
    'database' => AMP_DATABASE,
  );

  /**
   * REALS FIELDS: cached_amp_activity.
   */
  $data['cached_amp_activity']['amp_activity_id'] = array(
    'title' => t('ID'),
    'help' => t('The Activity ID'),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
      'numeric' => TRUE,
    ),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $data['cached_amp_activity']['name'] = array(
    'title' => t('Name'),
    'help' => t('Name for the activity.'),
    'argument' => array(
      'handler' => 'amp_activity_handler_argument_string',
    ),
    'field' => array(
      'help' => t('Name for the activity.') . ' (i18n)',
      'handler' => 'amp_activity_handler_field_translation',
      'real field' => 'amp_activity_id',
      'amp entity type' => 'activity_name',
      'click sortable' => TRUE, // @TODO: Doesn't really work yet.
    ),
  );

  $data['cached_amp_activity']['actual_start_date'] = array(
    'title' => t('Start date'),
    'help' => t('Date of the start of project'),
    'argument' => array(
      'handler' => 'amp_activity_handler_argument_date',
    ),
    'field' => array(
      'handler' => 'amp_activity_handler_field_date_convert',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    )
  );

  $data['cached_amp_activity']['actual_completion_date'] = array(
    'title' => t('End date'),
    'help' => t('Date of the actual completion'),
    'argument' => array(
      'handler' => 'amp_activity_handler_argument_date',
    ),
    'field' => array(
      'handler' => 'amp_activity_handler_field_date_convert',
      'click sortable' => TRUE
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    )
  );

  /**
   * CUSTOM FIELDS: cached_amp_activity.
   */
  $data['cached_amp_activity']['filter_public'] = array(
    'title' => t('Filter Public'),
    'help' => t('Filters out Activities that are not public.'),
    'filter' => array(
      'handler' => 'amp_activity_handler_filter_activity_filter_public',
      'real field' => 'amp_activity_id',
    ),
  );

  $data['cached_amp_activity']['view_link'] = array(
    'title' => t('View Link'),
    'help' => t('A link to the activity displayed as an "icon".'),
    'field' => array(
      'handler' => 'amp_activity_handler_field_view_activity',
      'real field' => 'amp_activity_id',
    ),
  );

  $data['cached_amp_activity']['organisation_names'] = array(
    'title' => t('Organisations having Role'),
    'real field' => 'organisation',
    'field' => array(
      'help' => t('Show Organizations that have a specific role.'),
      'handler' => 'amp_activity_handler_field_organisation_names',
      'real field' => 'amp_activity_id',
      'amp entity type' => 'organisation_name',
      'options callback' => '_ampp_projects_get_amp_roles',
      'options label' => 'Roles',
      'options arguments' => array('metadata_code'),
    ),
  );

  $data['cached_amp_activity']['sector_names'] = array(
    'title' => t('Sectors by classification'),
    'help' => t('Retrives Sectors of a particulary classification for the Activity on pre_render.') . ' (i18n)',
    'field' => array(
      'handler' => 'amp_activity_handler_field_sector_names',
      'real field' => 'amp_activity_id',
      'amp entity type' => 'sector_name',
      'options callback' => '_ampp_projects_get_amp_sector_schemes',
      'options label' => 'Sectors',
      'options arguments' => array('metadata_code'),
    ),
  );

  $data['cached_amp_activity']['program_names'] = array(
    'title' => t('Program Names'),
    'help' => t('Retrives Programs for the Activity on pre_render.') . ' (i18n)',
    'field' => array(
      'handler' => 'amp_activity_handler_field_program_names',
      'real field' => 'amp_activity_id',
      'amp entity type' => 'program_name',
    ),
  );

  $data['cached_amp_activity']['location_names'] = array(
    'title' => t('Location Names'),
    'help' => t('Retrives Programs for the Activity on pre_render.') . ' (i18n)',
    'field' => array(
      'handler' => 'amp_activity_handler_field_location_names',
      'real field' => 'amp_activity_id',
      'amp entity type' => 'location_name',
    ),
  );

  $data['cached_amp_activity']['status_name'] = array(
    'title' => t('Status'),
    'help' => t('The status of the activity, human readable.'),
    'field' => array(
      'handler' => 'amp_activity_handler_field_status',
      'real field' => 'amp_activity_id',
      'click sortable' => TRUE
    ),
  );

  /**
   * TABLE DEFINITION: amp_org_role.
   */
  $data['amp_org_role']['table']['group'] = t('Organization Role');
  $data['amp_org_role']['table']['join'] = array(
    'cached_amp_activity' => array(
      'left_field' => 'amp_activity_id',
      'field' => 'activity',
      'type' => 'INNER',
    )
  );

  $data['amp_org_role']['organisation_role'] = array(
    'title' => t('Organisation having Role'),
    'real field' => 'organisation',
    'argument' => array(
      'help' => t('Filter by Organizations that have a specific role'),
      'handler' => 'amp_activity_handler_argument_organisation_role',
      'options callback' => '_ampp_projects_get_amp_roles',
      'options label' => 'Roles',
      'options arguments' => array('metadata_code'),
    ),
  );

  /**
   * TABLE DEFINITION: amp_activity_sector.
   */
  $data['amp_activity_sector']['table']['group'] = t('Sector');
  $data['amp_activity_sector']['table']['join'] = array(
    // Directly links to amp_activity table.
    'cached_amp_activity' => array(
      'left_field' => 'amp_activity_id',
      'field' => 'amp_activity_id',
    ),
  );

  $data['amp_activity_sector']['amp_sector_id'] = array(
    'title' => t('Activity Sectors'),
    'help' => t('Filter Activities by Sectors ID'),
    'argument' => array(
      'handler' => 'amp_activity_handler_argument_expandable',
      'expand callback' => '_amp_activity_get_child_sector_ids',
    ),
  );

  /**
   * TABLE DEFINITION: amp_activity_location.
   */
  $data['amp_activity_location']['table']['group'] = t('Location');
  $data['amp_activity_location']['table']['join'] = array(
    'cached_amp_activity' => array(
      'left_field' => 'amp_activity_id',
      'field' => 'amp_activity_id',
    ),
  );

  /**
   * TABLE DEFINITION: amp_location.
   */
  $data['amp_location']['table']['group'] = t('Location');
  $data['amp_location']['table']['join'] = array(
    'cached_amp_activity' => array(
      'left_table' => 'amp_activity_location',
      'left_field' => 'amp_location_id',
      'field' => 'amp_location_id'
    )
  );

  // We need amp_activity_location to get the Location ID.
  $data['amp_location']['location_id'] = array(
    'title' => t('Activity Locations'),
    'help' => t('Filter Activities by Location ID'),
    'argument' => array(
      'handler' => 'amp_activity_handler_argument_expandable',
      'expand callback' => '_amp_activity_get_location_parent_ids',
    ),
  );

  /**
   * TABLE DEFINITION: amp_activity_program.
   */
  $data['amp_activity_program']['table']['group'] = t('Program');
  $data['amp_activity_program']['table']['join'] = array(
    // Directly links to amp_activity table.
    'cached_amp_activity' => array(
      'left_field' => 'amp_activity_id',
      'field' => 'amp_activity_id',
    ),
  );

  $data['amp_activity_program']['amp_program_id'] = array(
    'title' => t('Activity Programs'),
    'help' => t('Filter Activities by Program ID'),
    'argument' => array(
      'handler' => 'amp_activity_handler_argument_expandable',
      'expand callback' => '_amp_activity_get_child_program_ids',
    ),
  );

  /**
   * TABLE DEFINITION: amp_activities_categoryvalues.
   */
  $data['amp_activities_categoryvalues']['table']['group'] = t('Category Values');
  $data['amp_activities_categoryvalues']['table']['join'] = array(
    'cached_amp_activity' => array(
      'left_field' => 'amp_activity_id',
      'field' => 'amp_activity_id',
      'type' => 'INNER',
    )
  );

  $data['amp_activities_categoryvalues']['amp_categoryvalue_id'] = array(
    'title' => t('Activities Projects Budget'),
    'help' => t('Budget type'),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );

  return $data;
}

/**
 * Implements hook_views_pre_execute().
 */
function amp_activity_views_pre_execute(&$view) {
  if ($view->name != 'projects_search_result') {
    return;
  }

  // Hide fields before rendering.
  switch ($view->current_display) {
    case 'default':
    case 'panel_pane_1':
    case 'feed_1':
      // Get the 'projects_search_result' pane configuration form session.
      if (!isset($_SESSION['projects_search_result_conf'])) {
        break;
      }
      $pane_conf = unserialize($_SESSION['projects_search_result_conf']);

      foreach ($view->display_handler->handlers['field'] as $field_name => $field_def) {
        if (!isset($pane_conf[$field_name])) {
          continue;
        }

        // Manually hide the field.
        // @TODO: Find a way to remove the field before runing the query.
        if (empty($pane_conf[$field_name]['show'])) {
          unset($view->field[$field_name]);
          unset($view->display_handler->handlers['field'][$field_name]);
          continue;
        }

        // Set the field column label.
        if (!empty($pane_conf[$field_name]['label'])) {
          $view->field[$field_name]->options['label'] = t($pane_conf[$field_name]['label']);
        }
      }
      break;
  }

  // Find a better place to add these GROUP BY.
  foreach (array('query', 'count_query') as $query_name) {
    // Required for fields.
    $view->build_info[$query_name]->groupBy('cached_amp_activity.amp_activity_id');
    $view->build_info[$query_name]->groupBy('cached_amp_activity.actual_start_date');
    $view->build_info[$query_name]->groupBy('cached_amp_activity.actual_completion_date');

    // Required for arguments.
    // @TODO: add them conditionally.
    // $view->build_info[$query_name]->groupBy('amp_org_role.activity');

    if (isset($view->get_total_amount_type)) {
      $expression = '(fd.transaction_amount / getexchange(cur.currency_code, fd.transaction_date ))';
      $view->build_info[$query_name]->groupBy($expression);
    }
  }

  // Alter the XLS export.
  if ($view->current_display == 'feed_1') {
    // Remove the view_link from the XLS.
    unset($view->field['view_link']);

    // Toggle the status column visibility.
    if (empty($_GET['show_status_column'])) {
      unset($view->field['status_name']);
    }
  }
}

/**
 * Returns a list of options for amp_role filters and arguments.
 *
 * @TODO: Add caching!
 */
function _ampp_projects_get_amp_roles($key = NULL) {
  $items = array();

  if (!empty($key) && !in_array($key, array('metadata_code', 'metadata_id'))) {
    return $items;
  }

  if ($key == 'metadata_id') {
    $key = 'amp_role_id';
  }
  else {
    if ($key == 'metadata_code') {
      $key = 'role_code';
    }
  }

  db_set_active('amp_projects');
  $query = db_select('amp_role', 'ar')->fields('ar');
  foreach ($query->execute()->fetchAll(PDO::FETCH_OBJ) as $role) {
    if (isset($key)) {
      $items[$role->$key] = $role->name;
    }
    else {
      $items[$role->role_code] = $role->amp_role_id;
    }
  }
  db_set_active();

  return $items;
}

/**
 * Returns a list of options for amp_role filters and arguments.
 *
 * @TODO: Add caching!
 */
function _ampp_projects_get_amp_sector_schemes($key = NULL) {
  $items = array();

  if (!empty($key) && !in_array($key, array('metadata_code', 'metadata_id'))) {
    return $items;
  }

  if ($key == 'metadata_id') {
    $key = 'id';
  }
  else {
    if ($key == 'metadata_code') {
      $key = 'name';
    }
  }

  db_set_active('amp_projects');
  $query = db_select('amp_classification_config', 'acc')->fields('acc');
  foreach ($query->execute()->fetchAll(PDO::FETCH_OBJ) as $role) {
    if (isset($key)) {
      $items[$role->$key] = $role->name;
    }
    else {
      $items[$role->name] = $role->id;
    }
  }
  db_set_active();

  return $items;
}
