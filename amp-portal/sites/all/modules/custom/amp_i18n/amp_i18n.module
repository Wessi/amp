<?php

/**
 * Returns translated names for a list of provided AMP dbentity IDs.
 *
 * Usage:
 *  <code>
 *    $array = amp_i18n_translate_entity('organisation_name', 21091, 'en');
 *    dpm($array);
 *
 *    $array = amp_i18n_translate_entity('organisation_name', array(21091, 666666), 'en');
 *    dpm($array);
 *  </code>
 */
function amp_i18n_translate_entity($amp_entity_type, $entity_ids, $language_code = NULL) {
  $query_info = array();

  if (!is_array($entity_ids)) {
    $entity_ids = array($entity_ids);
  }

  // If no language was provided get the site language.
  if (!isset($language_code)) {
    $language_code = $GLOBALS['language']->language;
  }

  // Get an array of arguments for the translate_field() function.
  $qargs = _amp_i18n_translate_entity_map($amp_entity_type);
  $id_selector = 'basetable.' . $qargs[':table_id'];

  db_set_active(AMP_DATABASE);
  $query = db_select($qargs[':table_name'], 'basetable');
  $query->addField('basetable', $qargs[':table_id'], 'id');
  $query->condition($id_selector, $entity_ids, 'IN');

  // Add the translate_field select expression.
  $i18n_info = amp_i18n_get_translate_expression($amp_entity_type, $language_code, 'basetable', NULL);
  $query->addExpression($i18n_info['expression'], 'name', $i18n_info['args']);

  $result = $query->execute();
  db_set_active();

  $translated_fields = array();
  foreach ($result as $record) {
    $translated_fields[$record->id] = $record->name;
  }

  return $translated_fields;
}

/**
 * Returns an AMP SQL translate_field expression.
 *
 * Usage:
 *  <code>
 *    db_set_active(AMP_DATABASE);
 *    $query = db_select('amp_organisation', 'amp_organisation')
 *      ->extend('PagerDefault')
 *      ->limit(20);
 *    $query->addField('amp_organisation', 'amp_org_id', 'id');
 *
 *    $amp_entity_type = 'organisation_name';
 *    $language_code = 'en';
 *    $i18n_info = amp_i18n_get_translate_expression($amp_entity_type, $language_code, 'amp_organisation', 'amp_org_id');
 *    $query->addExpression($i18n_info['expression'], 'name', $i18n_info['args']);
 *
 *    $result = $query->execute();
 *    db_set_active();
 *    foreach ($result as $record) {
 *      $translated_fields[$record->id] = $record->name;
 *    }
 *
 *    dpm($translated_fields);
 *  </code>
 */
function amp_i18n_get_translate_expression($amp_entity_type, $language_code = NULL, $table_alias = NULL, $field_alias = NULL) {
  $info = array();

  // If no language was provided get the site language.
  if (!isset($language_code)) {
    $language_code = $GLOBALS['language']->language;
  }

  // Get an array of arguments for the translate_field() function.
  $info['args'] = _amp_i18n_translate_entity_map($amp_entity_type);
  $info['args'] += array(
    ':lang_code' => $language_code,
  );

  if (!isset($table_alias)) {
    $table_alias = $info['args'][':table_name'];
  }

  if (!isset($field_alias)) {
    $field_alias = $info['args'][':table_id'];
  }

  // Add the translate_field select expression.
  $id_selector = $field_alias;
  if ($table_alias) {
    $id_selector = $table_alias . '.' . $field_alias;
  }
  $info['expression'] = "translate_field(:object_class, :field_name, $id_selector, :table_name, :table_column, :table_id, :lang_code)";

  return $info;
}

/**
 * This is a helper function for the amp translate_field() database function.
 * Among the returned values one should provide an entity ID and a two letter
 * language code to the translate_field() function.
 *
 * NOTE: Themes were renamed to programs in AMP.
 *
 * @param $type
 *   The name of the AMP DB entity.
 *
 * @return array
 *   An associative array of values required by the translate_field() function:
 *   - ':object_class': A JAVA class from AMP that deals with the dbentity.
 *   - ':field_name':   Name of the class proprety that stores the string for translation.
 *   - ':table_name':   Table where the dbentity is stored.
 *   - ':table_column': Table column where the string for translation is stored.
 *   - ':table_id':     The table PRIMARY KEY.
 */
function _amp_i18n_translate_entity_map($type = NULL) {
  // translate_field('org.digijava.module.aim.dbentity.AmpActivityVersion', 'name', $EID, 'amp_activity_version', 'name', 'amp_activity_id', $LANG)
  $entity_types['activity_name'] = array(
    ':object_class' => 'org.digijava.module.aim.dbentity.AmpActivityVersion',
    ':field_name' => 'name',
    ':table_name' => 'amp_activity_version',
    ':table_column' => 'name',
    ':table_id' => 'amp_activity_id',
  );

  // translate_field('org.digijava.module.aim.dbentity.AmpOrganisation', 'name', $EID, 'amp_organisation', 'name', 'amp_org_id', $LANG)
  $entity_types['organisation_name'] = array(
    ':object_class' => 'org.digijava.module.aim.dbentity.AmpOrganisation',
    ':field_name' => 'name',
    ':table_name' => 'amp_organisation',
    ':table_column' => 'name',
    ':table_id' => 'amp_org_id',
  );

  // translate_field('org.digijava.module.aim.dbentity.AmpSector', 'name', $EID, 'amp_sector', 'name', 'amp_sector_id', $LANG)
  $entity_types['sector_name'] = array(
    ':object_class' => 'org.digijava.module.aim.dbentity.AmpSector',
    ':field_name' => 'name',
    ':table_name' => 'amp_sector',
    ':table_column' => 'name',
    ':table_id' => 'amp_sector_id',
  );

  // translate_field('org.digijava.module.aim.dbentity.AmpTheme', 'name', $EID, 'amp_theme', 'name', 'amp_theme_id', $LANG)
  $entity_types['program_name'] = array(
    ':object_class' => 'org.digijava.module.aim.dbentity.AmpTheme',
    ':field_name' => 'name',
    ':table_name' => 'amp_theme',
    ':table_column' => 'name',
    ':table_id' => 'amp_theme_id',
  );

  // translate_field('org.digijava.module.aim.dbentity.AmpCategoryValueLocations', 'name', $EID, 'amp_category_value_location', 'location_name', 'id', 'en')
  $entity_types['location_name'] = array(
    ':object_class' => 'org.digijava.module.aim.dbentity.AmpCategoryValueLocations',
    ':field_name' => 'name',
    ':table_name' => 'amp_category_value_location',
    ':table_column' => 'location_name',
    ':table_id' => 'id',
  );

  if (isset($type) && $type == 'all') {
    return $entity_types;
  }

  if (isset($type) && array_key_exists($type, $entity_types)) {
    return $entity_types[$type];
  }

  return NULL;
}
