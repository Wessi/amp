<?php
// $Id: ampp_feedback.module,v 1.18 2013/04/05 15:30:14 vamirbekyan Exp $

/**
* @file
* Lets users to send feedback messages.
*
* Makes possible to send feedback messages for guest users.
* Adds Name, Email(for anonymous users), Subject fields 
* to the form of feedback module.
* Sends email with feedback to site admins
* 
*/



/**
* Implementation of hook_init().
*/
function ampp_feedback_init() {
  $path = drupal_get_path('module', 'ampp_feedback');
  drupal_add_js($path . '/ampp_feedback.js');
  
}


function ampp_feedback_ctools_plugin_directory($owner, $plugin_type) {
	if($owner == 'ctools' && $plugin_type == 'content_types') {
		return 'plugins/content_types';
	}
}

/**
 *  Implementation of hook_page_alter
 */
function ampp_feedback_page_alter(&$page) {
  unset($page['page_bottom']['feedback']); 
}

/**
 * Implementation of hook_form_alter().
 */
function ampp_feedback_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'feedback_form':
      if(isset($_SESSION['feedback_submitted']) && $_SESSION['feedback_submitted']){
        $errors = form_get_errors(); 
        if(count($errors)){       
          $_SESSION['messages']['error'] = array_diff($_SESSION['messages']['error'], $errors);
          
          $output = '';    
          $output .= "<div class=\"messages error\">";
          $output .= '<h2 class="element-invisible">' . t('Error message') . "</h2>";
    
          $output .= " <ul>";
          foreach ($errors as $message) {
            $output .= '  <li>' . $message . "</li>";
          }
          $output .= " </ul>";
        
          $output .= '<span><img src="/sites/all/themes/ampp/images/cancel_icon.gif" id="close"></span>';
          $output .= '</div>';
          $form['errors'] = array(
            '#markup' => $output,
            '#weight' => 0,
          );
        }
        unset($_SESSION['feedback_submitted']); 
      }
        
      unset($form['messages']);
      unset($form['help']);
         
      $form['from'] = array(
        '#type' => 'textfield',
        '#title' => t('Name'),
        '#required' => TRUE,
        '#wysiwyg' => FALSE,
        );
      $form['email'] = array(
        '#type' => 'textfield',
        '#title' => t('Email'),
        '#required' => TRUE,
        '#wysiwyg' => FALSE,
        '#element_validate' => array('validate_email_address'), 
        );
      // Load includes/common.inc from the hierarchical select module.
      module_load_include('inc', 'hierarchical_select', 'includes/common');
      
      if (!isset($form_state['build_info']['args'][0]['vocab']) || $form_state['build_info']['args'][0]['vocab'] == 0) {
        // Load category based in vocabulary machine name
        $voc = 'institutions';
        $vocabulary = taxonomy_vocabulary_machine_name_load($voc);
        if (count(taxonomy_get_tree($vocabulary->vid))) {
          // hide term when empty
          $form['institutions'] =  array(
            '#title' => t($vocabulary->name),
            '#type' => 'hierarchical_select',
            '#required' => TRUE,
            '#size' => 3,
            '#config' => array(
              'module' => 'hs_taxonomy',
              'params' => array(
                'vid' => (int) $vocabulary->vid,
        	    'exclude_tid'                => NULL,
                'root_term'                  => NULL,
                'entity_count_for_node_type' => NULL,
              ),
              'save_lineage'    => 0,
              'enforce_deepest' => 0,
              'entity_count'    => 0,
              'require_entity'  => 1,
              'resizable'       => 1,
              'level_labels' => array(
                'status' => 0,
                'labels' => array(),
              ),
              'dropbox' => array(
                'status'   => 0,
                'title'    => t('All selections'),
                'limit'    => 0,
                'reset_hs' => 1,
              ),
              'editability' => array(
                'status'           => 0,
                'item_types'       => array(),
                'allowed_levels'   => array(),
                'allow_new_levels' => 0,
                'max_levels'       => 3,
              ),
              'animation_delay'    => variable_get('hierarchical_select_animation_delay', 400),
              'special_items'      => array(),
              'render_flat_select' => 0,
             ),
            '#default_value' => -1,
          );
        }
        
        hierarchical_select_common_config_apply( $form['institutions'], "taxonomy-$vocabulary->vid");
        
        $element_info = element_info('hierarchical_select');
        $form['institutions']['#process'] = array_merge($element_info['#process'], array('hs_taxonomy_widget_process'));
        $form['institutions']['#weight'] = 4;
      }
        
      $form['message']['#weight'] = 5;
      $form['captcha']['#weight'] = 7;
      
      $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Send'),
      );
      $form['#submit'] = array('ampp_feedback_form_submit');
      $form['#validate'][] = "ampp_feedback_validate";
      break;      

    case 'feedback_admin_view_form':
      $status_headings = array(
        FEEDBACK_OPEN => t('Open feedback messages'),
        FEEDBACK_PROCESSED => t('Processed feedback messages'),
      );
      $form['#feedback_header'] = array(
        array(),
        t('Info'),
        array('data' => t('Date'), 'field' => 'f.timestamp', 'sort' => 'asc'),
        t('User'),
       // t('Taxonomy'),
        t('Message'),
        t('Delete'),
      );
      // Hack to prevent pager_query() from issuing PHP notices.
      if (!isset($_GET['page'])) {
        $_GET['page'] = '';
      }
      if (count(explode(',', $_GET['page'])) < 2) {
        $_GET['page'] .= ',0';
      }
    
      $form['feedback-messages'] = array('#tree' => TRUE);
      $query = db_select('feedback', 'f')->extend('PagerDefault')->extend('TableSort');
     // $query->join('users', 'u', 'f.uid = u.uid');
      $query->fields('f')
        ->limit(50);
     // $entries = $query->execute()->fetchObject();
      foreach (array(FEEDBACK_OPEN, FEEDBACK_PROCESSED) as $status) {
        $status_query = clone $query;
        $form['feedback-messages'][$status] = array(
          '#type' => 'fieldset',
          '#title' => $status_headings[$status],
          '#collapsible' => TRUE,
          '#collapsed' => $status,
          '#attributes' => array('class' => array('feedback-messages')),
        );
        $entries = $status_query
          ->condition('f.status', $status)
          ->execute()
          ->fetchAll();
        
        if (!empty($entries)) {
          foreach ($entries as $entry) {
            $fid = $entry->fid;
            $form['feedback-messages'][$status][$fid] = array(
              '#type' => 'checkbox',
              '#return_value' => FEEDBACK_PROCESSED,
              '#default_value' => FALSE,
            );
            $form['feedback-messages'][$status][$fid]['location'] = array('#markup' => "<p>" . ampp_feedback_format_info($entry) . "</p>");
            $form['feedback-messages'][$status][$fid]['date'] = array('#markup' => format_date($entry->timestamp, 'small'));
            $form['feedback-messages'][$status][$fid]['user'] = array('#markup' => ampp_feedback_format_user($entry));
            //$form['feedback-messages'][$status][$fid]['taxonomy'] = array('#markup' => "<p>" . ampp_feedback_format_taxonomy($entry) . "</p>");
            $form['feedback-messages'][$status][$fid]['message'] = array('#markup' => ampp_feedback_format_message($entry));
            $form['feedback-messages'][$status][$fid]['delete'] = array('#type' => 'link', '#title' => t('delete'), '#href' => "admin/reports/feedback/$fid/delete");
          }
        }
      }
      
      break;
  }

  return $form;
}

/**
 * Implementation of hook_validate
 */
function ampp_feedback_validate($form, &$form_state){
   $_SESSION['feedback_submitted'] = TRUE;
}

/**
 * Validate function
 *  
 * Checks if $element value is a valid email address 
 *
 */
function validate_email_address($element, &$form_state) {
  if (!valid_email_address($element['#value']))
    form_error($element, t('Please enter a valid email address.'));
}

/**
* Implementation of hook_form_submit().
*/
function ampp_feedback_form_submit($form, &$form_state) {  
  ampp_feedback_send_emails($form, $form_state);
  ampp_feedback_add_entry($form, $form_state);
  
  $_SESSION['feedback_form_success_message'] = t('Thank you for your feedback.'); 
  $_SESSION['feedback_submitted'] = FALSE;
  
}

/**
 * Submit function
 *  
 * Store a new feedback entry in the database.
 *
 */
function ampp_feedback_add_entry($form, &$form_state) {
  $info = array();
  $info['ip'] = $_SERVER['REMOTE_ADDR'];
  $info['send_method'] = $_SERVER['REQUEST_METHOD'];   
  $info['form_values'] = $form_state['values'];
  
  $taxonomies = array();
  $taxonomies = $form_state['values']['institutions'];
  
  global $user;
  db_insert('feedback')
  ->fields(array(
    'uid' => $user->uid,
    'message' => trim($form_state['values']['message']), 
    'location' => $form_state['values']['location'], 
    'location_masked' =>  feedback_mask_path($form_state['values']['location']), 
    'url' => url($form_state['values']['location'], array('absolute' => TRUE)), 
    'timestamp' => time(), 
    'useragent' => $_SERVER['HTTP_USER_AGENT'], 
    'author' => $form_state['values']['from'],
    'info' => json_encode($info),
    'other' => json_encode($taxonomies),
  ))
  ->execute();
}

/**
 * Submit function
 *  
 * Send email to users with "view_feedback messages" permission
 * and to author if "Copy to myself" is checked.
 */
function ampp_feedback_send_emails($form, &$form_state) {
  $query = db_select('users', 'u');
  $query->join('users_roles', 'ur', 'u.uid = ur.uid');
  $query->join('role_permission', 'p', 'ur.rid = p.rid');  
  $query->condition('p.permission', 'view feedback messages');
  $query->fields('u');
  $result = $query->execute();

  $accounts = array();
  while($entry = $result->fetchObject()) {
    $accounts[] = $entry;
  }
      
  $params['form_state'] = $form_state;
  foreach ($accounts as $account) {
    $params['account'] = $account;
    drupal_mail('ampp_feedback', 'feedback', $account->mail, user_preferred_language($account), $params);
  }
}

/**
 * Implementation of hook_mail().
 */
function ampp_feedback_mail($key, &$message, $params) {
  $form_state = $params['form_state'];
  switch ($key) {
    case 'feedback':      
      $message['subject'] = variable_get('site_name', "AMP public site") . " feedback";
      $message['body'][] = t("Name") . ": " . $form_state['values']['from'];
      $message['body'][] = t("Email") . ": " . $form_state['values']['email'];      
      $message['body'][] = $form_state['values']['message'];
      break;
  }
}

/**
 * Format a feedback entry.
 *
 * @param $entry
 *   A feedback object.
 */
function ampp_feedback_format_info($entry) {
  $info = json_decode($entry->info);
  
  $message = '';
  $message .= "browser: ";//l(truncate_utf8($entry->location, 32, FALSE, TRUE), $entry->url);
  if (!empty($entry->useragent)) {
    if (module_exists('browscap')) {
      $browserinfo = browscap_get_browser($entry->useragent);
      $browser = ($browserinfo['parent'] ? $browserinfo['parent'] .' / '. $browserinfo['platform'] : $browserinfo['useragent']);
      $message .=  check_plain($browser);
    }
    else {
      $message .= check_plain($entry->useragent);
    }
  }

  $message .= "<br>ip: " . $info->ip;
  $message .= "<br>send method: " . $info->send_method;
  $message .= "<br>captcha_response: " . (isset($info->form_values->captcha_response)? print_r($info->form_values->captcha_response, true): 'None');
  
  return $message;
}

/**
 * Format a feedback entry.
 *
 * @param $entry
 *   A feedback object.
 */
function ampp_feedback_format_user($entry){
  $info = json_decode($entry->info);
  
  $message = '';
  $message .= check_plain($entry->author);
  $message .= "<br><br>uid: ". $entry->uid;
  $message .= "<br>email: " . $info->form_values->email;
  
  return $message;
}

/**
 * Format a feedback entry.
 *
 * @param $entry
 *   A feedback object.
 */
function ampp_feedback_format_message($entry){
  $message = '';
  $message .= check_plain($entry->message);
  $message .= "<br><br>" . ampp_feedback_format_taxonomy($entry);
  
  return $message;  
}

/**
 * Format a feedback entry.
 *
 * @param $entry
 *   A feedback object.
 */
function ampp_feedback_format_taxonomy($entry) {
  $message = '';
  if ($entry->other) {
    $taxonomy = json_decode($entry->other);
    foreach($taxonomy as $t) {
      $term = taxonomy_term_load($t->tid);
      $vocab = taxonomy_vocabulary_load($term->vid);
      $message .= $vocab->name . ' : ' . $term->name;
    }
  }
  else {
    $message = t("None");
  }
  
  return $message;
}
/**
* Implementation of hook_menu
*//*
function ampp_feedback_menu() {
  $items['feedback'] = array(
    'title' => "Feedback",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feedback_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['feedback/thanks'] = array(
    'title' => "Feedback",
    'page callback' => 'ampp_feedback_thanks',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}*/

/**
 *  menu callback function
 */
function ampp_feedback_thanks(){
  $_POST['page_display_format'] = 'popup';  
  return "";
}

/**
 * Implements hook_preprocess_page
 */
function ampp_feedback_preprocess_page(&$vars) {  
  if(arg(1) && arg(0) == 'feedback' && arg(1) == 'thanks'){
    $status_messages = $_SESSION['temp_messages'];
    foreach($status_messages as $a => $m)
     // drupal_set_message($m, 'status');
    
    $vars['messages'] = ampp_status_messages(NULL, FALSE);
  } 
}

/**
 * Implementation of hook_block_info
 
function ampp_feedback_block_info() {
  $blocks['feedback'] = array(
    'info' => t('Feedback'), 
  );

  return $blocks;
}
*/
/**
 * Implementation of hook_block_view

function ampp_feedback_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'feedback':
      drupal_get_form('feedback_form');
      $block['subject'] = t('Quick contact');
      if (isset($_SESSION['feedback_form_success_message'])) {
        $block['content'] = $_SESSION['feedback_form_success_message'];
        unset($_SESSION['feedback_form_success_message']);
      }
      else 
        $block['content'] = drupal_get_form('feedback_form');
      break;
  }
  return $block;  
}
 */