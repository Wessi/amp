<?php
// $Id: ampp_feedback.install,v 1.3 2012/07/11 10:34:50 anush.martirosyan Exp $
/**
 * @file ampp_feedback.install
 * Contains install functions for Zunia Feedback.
 */

/**
 * Implementation of hook_schema().
 */
/*function ampp_feedback_schema() {
  $schema['feedback'] = array(
    'description' => t('Stores all feedback messages.'),
    'fields' => array(
      'fid' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE,
        'description' => t('The primary identifier for a feedback message.'),
      ),
      'uid' => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,
        'description' => t('The user id of the author of a feedback message.'),
      ),
      'status' => array('type' => 'int', 'size' => 'tiny', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0,
        'description' => t('The status of a feedback message.'),
      ),
      'message' => array('type' => 'text', 'size' => 'big', 'not null' => TRUE,
        'description' => t('The actual feedback message.'),
      ),
      'location' => array('type' => 'text', 'not null' => TRUE,
        'description' => t('The internal Drupal path of the page the feedback message was submitted on.'),
      ),
      'location_masked' => array('type' => 'text', 'not null' => TRUE,
        'description' => t('The masked Drupal path of the page the feedback message was submitted on.'),
      ),
      'url' => array('type' => 'text', 'not null' => TRUE,
        'description' => t('The absolute URL of the page the feedback message was submitted on.'),
      ),
      'useragent' => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE,
        'description' => t('The user agent of the feedback message author.'),
      ),
      'timestamp' => array('type' => 'int', 'not null' => TRUE, 'default' => 0,
        'description' => t('The UNIX timestamp when the feedback message was created.'),
      ),
      'author' => array('type' => 'text', 'not null' => TRUE,
        'description' => t('The author info.')
      ),
      'subject' => array('type' => 'text', 'not null' => TRUE,
        'description' => t('The subject of a feedback message.')
      ),
    ),
    'primary key' => array('fid'),
    'indexes' => array(
      'location' => array(array('location', 32)),
      'location_masked' => array(array('location_masked', 32)),
    ),
  );
  return $schema;
}
*/
/**
 * Implementation of hook_install().
 */
function ampp_feedback_install() {
  db_add_field('feedback', 'author', array('type' => 'text', 'not null' => FALSE,
        'description' => t('The name of feedback author.')));

  db_add_field('feedback', 'info', array('type' => 'text', 'not null' => FALSE,
        'description' => t('Additional info.')));

  db_add_field('feedback', 'other', array('type' => 'text', 'not null' => FALSE,
        'description' => t('Taxonomy info.')));

  db_insert("captcha_points")
  ->fields(array(
  'form_id' => 'feedback_form',
  'module' => 'image_captcha',
  'captcha_type' => 'Image',
  ))
  ->execute();
}

/**
 * Implementation of hook_uninstall().
 */
function ampp_feedback_uninstall() {
  db_delete("captcha_points")
  ->condition("form_id", "feedback_form")
  ->execute();

  db_drop_field('feedback', 'author');
  db_drop_field('feedback', 'info');
  db_drop_field('feedback', 'other');

  db_delete("variable")
  ->condition('name', 'ampp_feedback_%%', 'LIKE')
  ->execute();
}